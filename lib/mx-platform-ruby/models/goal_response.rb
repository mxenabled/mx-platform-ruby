=begin
#MX Platform API

#The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module MxPlatformRuby
  class GoalResponse
    # Unique identifier of the account for the goal.
    attr_accessor :account_guid

    # Amount of the goal.
    attr_accessor :amount

    # Date and time the goal was completed.
    attr_accessor :completed_at

    # The current amount of the goal.
    attr_accessor :current_amount

    # The goal type.
    attr_accessor :goal_type_name

    # Unique identifier for the goal. Defined by MX.
    attr_accessor :guid

    # Determines if the goal has been spent.
    attr_accessor :has_been_spent

    # Determines if the goal is complete.
    attr_accessor :is_complete

    # Additional information a partner can store on the goal.
    attr_accessor :metadata

    # The category of the goal.
    attr_accessor :meta_type_name

    # The name of the goal.
    attr_accessor :name

    # The priority of the goal in relation to multiple goals.
    attr_accessor :position

    # Date and time the goal is projected to be completed.
    attr_accessor :projected_to_complete_at

    # Date and time the goal is to complete. Intended for users to set their own goal completion dates.
    attr_accessor :targeted_to_complete_at

    attr_accessor :track_type_name

    # The unique identifier for the the user. Defined by MX.
    attr_accessor :user_guid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_guid' => :'account_guid',
        :'amount' => :'amount',
        :'completed_at' => :'completed_at',
        :'current_amount' => :'current_amount',
        :'goal_type_name' => :'goal_type_name',
        :'guid' => :'guid',
        :'has_been_spent' => :'has_been_spent',
        :'is_complete' => :'is_complete',
        :'metadata' => :'metadata',
        :'meta_type_name' => :'meta_type_name',
        :'name' => :'name',
        :'position' => :'position',
        :'projected_to_complete_at' => :'projected_to_complete_at',
        :'targeted_to_complete_at' => :'targeted_to_complete_at',
        :'track_type_name' => :'track_type_name',
        :'user_guid' => :'user_guid'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_guid' => :'String',
        :'amount' => :'Float',
        :'completed_at' => :'String',
        :'current_amount' => :'Float',
        :'goal_type_name' => :'String',
        :'guid' => :'String',
        :'has_been_spent' => :'Boolean',
        :'is_complete' => :'Boolean',
        :'metadata' => :'String',
        :'meta_type_name' => :'String',
        :'name' => :'String',
        :'position' => :'Integer',
        :'projected_to_complete_at' => :'String',
        :'targeted_to_complete_at' => :'String',
        :'track_type_name' => :'String',
        :'user_guid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MxPlatformRuby::GoalResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MxPlatformRuby::GoalResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_guid')
        self.account_guid = attributes[:'account_guid']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'current_amount')
        self.current_amount = attributes[:'current_amount']
      end

      if attributes.key?(:'goal_type_name')
        self.goal_type_name = attributes[:'goal_type_name']
      end

      if attributes.key?(:'guid')
        self.guid = attributes[:'guid']
      end

      if attributes.key?(:'has_been_spent')
        self.has_been_spent = attributes[:'has_been_spent']
      end

      if attributes.key?(:'is_complete')
        self.is_complete = attributes[:'is_complete']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'meta_type_name')
        self.meta_type_name = attributes[:'meta_type_name']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'projected_to_complete_at')
        self.projected_to_complete_at = attributes[:'projected_to_complete_at']
      end

      if attributes.key?(:'targeted_to_complete_at')
        self.targeted_to_complete_at = attributes[:'targeted_to_complete_at']
      end

      if attributes.key?(:'track_type_name')
        self.track_type_name = attributes[:'track_type_name']
      end

      if attributes.key?(:'user_guid')
        self.user_guid = attributes[:'user_guid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_guid == o.account_guid &&
          amount == o.amount &&
          completed_at == o.completed_at &&
          current_amount == o.current_amount &&
          goal_type_name == o.goal_type_name &&
          guid == o.guid &&
          has_been_spent == o.has_been_spent &&
          is_complete == o.is_complete &&
          metadata == o.metadata &&
          meta_type_name == o.meta_type_name &&
          name == o.name &&
          position == o.position &&
          projected_to_complete_at == o.projected_to_complete_at &&
          targeted_to_complete_at == o.targeted_to_complete_at &&
          track_type_name == o.track_type_name &&
          user_guid == o.user_guid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_guid, amount, completed_at, current_amount, goal_type_name, guid, has_been_spent, is_complete, metadata, meta_type_name, name, position, projected_to_complete_at, targeted_to_complete_at, track_type_name, user_guid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MxPlatformRuby.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
