=begin
#MX Platform API

#The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module MxPlatformRuby
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create manual transaction
    # This endpoint can only be used to create manual transactions that are under a manual account. This endpoint accepts the optional MX-Skip-Webhook header and skip_webhook parameter.
    # @param user_guid [String] The unique identifier for the user.
    # @param account_guid [String] The unique identifier for the account.
    # @param transaction_create_request_body [TransactionCreateRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [TransactionCreateResponseBody]
    def users_user_guid_accounts_account_guid_transactions_post(user_guid, account_guid, transaction_create_request_body, opts = {})
      data, _status_code, _headers = users_user_guid_accounts_account_guid_transactions_post_with_http_info(user_guid, account_guid, transaction_create_request_body, opts)
      data
    end

    # Create manual transaction
    # This endpoint can only be used to create manual transactions that are under a manual account. This endpoint accepts the optional MX-Skip-Webhook header and skip_webhook parameter.
    # @param user_guid [String] The unique identifier for the user.
    # @param account_guid [String] The unique identifier for the account.
    # @param transaction_create_request_body [TransactionCreateRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionCreateResponseBody, Integer, Hash)>] TransactionCreateResponseBody data, response status code and response headers
    def users_user_guid_accounts_account_guid_transactions_post_with_http_info(user_guid, account_guid, transaction_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.users_user_guid_accounts_account_guid_transactions_post ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling TransactionsApi.users_user_guid_accounts_account_guid_transactions_post"
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling TransactionsApi.users_user_guid_accounts_account_guid_transactions_post"
      end
      # verify the required parameter 'transaction_create_request_body' is set
      if @api_client.config.client_side_validation && transaction_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_create_request_body' when calling TransactionsApi.users_user_guid_accounts_account_guid_transactions_post"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}/transactions'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transaction_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionCreateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TransactionsApi.users_user_guid_accounts_account_guid_transactions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#users_user_guid_accounts_account_guid_transactions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
