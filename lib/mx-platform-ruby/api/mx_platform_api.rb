=begin
#MX Platform API

#The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module MxPlatformRuby
  class MxPlatformApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Aggregate member
    # Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def aggregate_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = aggregate_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Aggregate member
    # Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def aggregate_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.aggregate_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.aggregate_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.aggregate_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/aggregate'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.aggregate_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#aggregate_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check balances
    # This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def check_balances(member_guid, user_guid, opts = {})
      data, _status_code, _headers = check_balances_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Check balances
    # This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def check_balances_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.check_balances ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.check_balances"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.check_balances"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/check_balance'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.check_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#check_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create category
    # Use this endpoint to create a new custom category for a specific `user`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param category_create_request_body [CategoryCreateRequestBody] Custom category object to be created
    # @param [Hash] opts the optional parameters
    # @return [CategoryResponseBody]
    def create_category(user_guid, category_create_request_body, opts = {})
      data, _status_code, _headers = create_category_with_http_info(user_guid, category_create_request_body, opts)
      data
    end

    # Create category
    # Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param category_create_request_body [CategoryCreateRequestBody] Custom category object to be created
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryResponseBody, Integer, Hash)>] CategoryResponseBody data, response status code and response headers
    def create_category_with_http_info(user_guid, category_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_category ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_category"
      end
      # verify the required parameter 'category_create_request_body' is set
      if @api_client.config.client_side_validation && category_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'category_create_request_body' when calling MxPlatformApi.create_category"
      end
      # resource path
      local_var_path = '/users/{user_guid}/categories'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(category_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create managed account
    # Use this endpoint to create a partner-managed account.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_account_create_request_body [ManagedAccountCreateRequestBody] Managed account to be created.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def create_managed_account(member_guid, user_guid, managed_account_create_request_body, opts = {})
      data, _status_code, _headers = create_managed_account_with_http_info(member_guid, user_guid, managed_account_create_request_body, opts)
      data
    end

    # Create managed account
    # Use this endpoint to create a partner-managed account.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_account_create_request_body [ManagedAccountCreateRequestBody] Managed account to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def create_managed_account_with_http_info(member_guid, user_guid, managed_account_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_managed_account ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.create_managed_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_managed_account"
      end
      # verify the required parameter 'managed_account_create_request_body' is set
      if @api_client.config.client_side_validation && managed_account_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'managed_account_create_request_body' when calling MxPlatformApi.create_managed_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(managed_account_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_managed_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_managed_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create managed member
    # Use this endpoint to create a new partner-managed `member`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_member_create_request_body [ManagedMemberCreateRequestBody] Managed member to be created.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def create_managed_member(user_guid, managed_member_create_request_body, opts = {})
      data, _status_code, _headers = create_managed_member_with_http_info(user_guid, managed_member_create_request_body, opts)
      data
    end

    # Create managed member
    # Use this endpoint to create a new partner-managed &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_member_create_request_body [ManagedMemberCreateRequestBody] Managed member to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def create_managed_member_with_http_info(user_guid, managed_member_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_managed_member ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_managed_member"
      end
      # verify the required parameter 'managed_member_create_request_body' is set
      if @api_client.config.client_side_validation && managed_member_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'managed_member_create_request_body' when calling MxPlatformApi.create_managed_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(managed_member_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_managed_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_managed_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create managed transaction
    # Use this endpoint to create a new partner-managed `transaction`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_transaction_create_request_body [ManagedTransactionCreateRequestBody] Managed transaction to be created.
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponseBody]
    def create_managed_transaction(account_guid, member_guid, user_guid, managed_transaction_create_request_body, opts = {})
      data, _status_code, _headers = create_managed_transaction_with_http_info(account_guid, member_guid, user_guid, managed_transaction_create_request_body, opts)
      data
    end

    # Create managed transaction
    # Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_transaction_create_request_body [ManagedTransactionCreateRequestBody] Managed transaction to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponseBody, Integer, Hash)>] TransactionResponseBody data, response status code and response headers
    def create_managed_transaction_with_http_info(account_guid, member_guid, user_guid, managed_transaction_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_managed_transaction ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.create_managed_transaction"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.create_managed_transaction"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_managed_transaction"
      end
      # verify the required parameter 'managed_transaction_create_request_body' is set
      if @api_client.config.client_side_validation && managed_transaction_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'managed_transaction_create_request_body' when calling MxPlatformApi.create_managed_transaction"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(managed_transaction_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_managed_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_managed_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create manual account
    # This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed..
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param account_create_request_body [AccountCreateRequestBody] Manual account object to be created.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def create_manual_account(user_guid, account_create_request_body, opts = {})
      data, _status_code, _headers = create_manual_account_with_http_info(user_guid, account_create_request_body, opts)
      data
    end

    # Create manual account
    # This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed..
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param account_create_request_body [AccountCreateRequestBody] Manual account object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def create_manual_account_with_http_info(user_guid, account_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_manual_account ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_manual_account"
      end
      # verify the required parameter 'account_create_request_body' is set
      if @api_client.config.client_side_validation && account_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'account_create_request_body' when calling MxPlatformApi.create_manual_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_manual_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_manual_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create member
    # This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_create_request_body [MemberCreateRequestBody] Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def create_member(user_guid, member_create_request_body, opts = {})
      data, _status_code, _headers = create_member_with_http_info(user_guid, member_create_request_body, opts)
      data
    end

    # Create member
    # This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_create_request_body [MemberCreateRequestBody] Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def create_member_with_http_info(user_guid, member_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_member ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_member"
      end
      # verify the required parameter 'member_create_request_body' is set
      if @api_client.config.client_side_validation && member_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'member_create_request_body' when calling MxPlatformApi.create_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(member_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tag
    # Use this endpoint to create a new custom tag.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tag_create_request_body [TagCreateRequestBody] Tag object to be created with required parameters (tag_guid)
    # @param [Hash] opts the optional parameters
    # @return [TagResponseBody]
    def create_tag(user_guid, tag_create_request_body, opts = {})
      data, _status_code, _headers = create_tag_with_http_info(user_guid, tag_create_request_body, opts)
      data
    end

    # Create tag
    # Use this endpoint to create a new custom tag.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tag_create_request_body [TagCreateRequestBody] Tag object to be created with required parameters (tag_guid)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagResponseBody, Integer, Hash)>] TagResponseBody data, response status code and response headers
    def create_tag_with_http_info(user_guid, tag_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_tag ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_tag"
      end
      # verify the required parameter 'tag_create_request_body' is set
      if @api_client.config.client_side_validation && tag_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'tag_create_request_body' when calling MxPlatformApi.create_tag"
      end
      # resource path
      local_var_path = '/users/{user_guid}/tags'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tag_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TagResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tagging
    # Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tagging_create_request_body [TaggingCreateRequestBody] Tagging object to be created with required parameters (tag_guid and transaction_guid)
    # @param [Hash] opts the optional parameters
    # @return [TaggingResponseBody]
    def create_tagging(user_guid, tagging_create_request_body, opts = {})
      data, _status_code, _headers = create_tagging_with_http_info(user_guid, tagging_create_request_body, opts)
      data
    end

    # Create tagging
    # Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tagging_create_request_body [TaggingCreateRequestBody] Tagging object to be created with required parameters (tag_guid and transaction_guid)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaggingResponseBody, Integer, Hash)>] TaggingResponseBody data, response status code and response headers
    def create_tagging_with_http_info(user_guid, tagging_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_tagging ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_tagging"
      end
      # verify the required parameter 'tagging_create_request_body' is set
      if @api_client.config.client_side_validation && tagging_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'tagging_create_request_body' when calling MxPlatformApi.create_tagging"
      end
      # resource path
      local_var_path = '/users/{user_guid}/taggings'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tagging_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TaggingResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_tagging",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_tagging\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create transaction rule
    # Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param transaction_rule_create_request_body [TransactionRuleCreateRequestBody] TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
    # @param [Hash] opts the optional parameters
    # @return [TransactionRuleResponseBody]
    def create_transaction_rule(user_guid, transaction_rule_create_request_body, opts = {})
      data, _status_code, _headers = create_transaction_rule_with_http_info(user_guid, transaction_rule_create_request_body, opts)
      data
    end

    # Create transaction rule
    # Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param transaction_rule_create_request_body [TransactionRuleCreateRequestBody] TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionRuleResponseBody, Integer, Hash)>] TransactionRuleResponseBody data, response status code and response headers
    def create_transaction_rule_with_http_info(user_guid, transaction_rule_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_transaction_rule ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.create_transaction_rule"
      end
      # verify the required parameter 'transaction_rule_create_request_body' is set
      if @api_client.config.client_side_validation && transaction_rule_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_rule_create_request_body' when calling MxPlatformApi.create_transaction_rule"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transaction_rules'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transaction_rule_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionRuleResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_transaction_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_transaction_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create user
    # Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
    # @param user_create_request_body [UserCreateRequestBody] User object to be created. (None of these parameters are required, but the user object cannot be empty)
    # @param [Hash] opts the optional parameters
    # @return [UserResponseBody]
    def create_user(user_create_request_body, opts = {})
      data, _status_code, _headers = create_user_with_http_info(user_create_request_body, opts)
      data
    end

    # Create user
    # Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
    # @param user_create_request_body [UserCreateRequestBody] User object to be created. (None of these parameters are required, but the user object cannot be empty)
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponseBody, Integer, Hash)>] UserResponseBody data, response status code and response headers
    def create_user_with_http_info(user_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.create_user ...'
      end
      # verify the required parameter 'user_create_request_body' is set
      if @api_client.config.client_side_validation && user_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'user_create_request_body' when calling MxPlatformApi.create_user"
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete category
    # Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_category(category_guid, user_guid, opts = {})
      delete_category_with_http_info(category_guid, user_guid, opts)
      nil
    end

    # Delete category
    # Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_category_with_http_info(category_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_category ...'
      end
      # verify the required parameter 'category_guid' is set
      if @api_client.config.client_side_validation && category_guid.nil?
        fail ArgumentError, "Missing the required parameter 'category_guid' when calling MxPlatformApi.delete_category"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_category"
      end
      # resource path
      local_var_path = '/users/{user_guid}/categories/{category_guid}'.sub('{' + 'category_guid' + '}', CGI.escape(category_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete managed account
    # Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_managed_account(account_guid, member_guid, user_guid, opts = {})
      delete_managed_account_with_http_info(account_guid, member_guid, user_guid, opts)
      nil
    end

    # Delete managed account
    # Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_managed_account_with_http_info(account_guid, member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_managed_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.delete_managed_account"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.delete_managed_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_managed_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_managed_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_managed_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete managed member
    # Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_managed_member(member_guid, user_guid, opts = {})
      delete_managed_member_with_http_info(member_guid, user_guid, opts)
      nil
    end

    # Delete managed member
    # Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_managed_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_managed_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.delete_managed_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_managed_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_managed_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_managed_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete managed transaction
    # Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_managed_transaction(account_guid, member_guid, transaction_guid, user_guid, opts = {})
      delete_managed_transaction_with_http_info(account_guid, member_guid, transaction_guid, user_guid, opts)
      nil
    end

    # Delete managed transaction
    # Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_managed_transaction_with_http_info(account_guid, member_guid, transaction_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_managed_transaction ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.delete_managed_transaction"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.delete_managed_transaction"
      end
      # verify the required parameter 'transaction_guid' is set
      if @api_client.config.client_side_validation && transaction_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_guid' when calling MxPlatformApi.delete_managed_transaction"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_managed_transaction"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'transaction_guid' + '}', CGI.escape(transaction_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_managed_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_managed_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete manual account
    # This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of `204 No Content`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_manual_account(account_guid, user_guid, opts = {})
      delete_manual_account_with_http_info(account_guid, user_guid, opts)
      nil
    end

    # Delete manual account
    # This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_manual_account_with_http_info(account_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_manual_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.delete_manual_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_manual_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_manual_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_manual_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete member
    # Accessing this endpoint will permanently delete a member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_member(member_guid, user_guid, opts = {})
      delete_member_with_http_info(member_guid, user_guid, opts)
      nil
    end

    # Delete member
    # Accessing this endpoint will permanently delete a member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.delete_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tag
    # Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tag(tag_guid, user_guid, opts = {})
      delete_tag_with_http_info(tag_guid, user_guid, opts)
      nil
    end

    # Delete tag
    # Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tag_with_http_info(tag_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_tag ...'
      end
      # verify the required parameter 'tag_guid' is set
      if @api_client.config.client_side_validation && tag_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tag_guid' when calling MxPlatformApi.delete_tag"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_tag"
      end
      # resource path
      local_var_path = '/users/{user_guid}/tags/{tag_guid}'.sub('{' + 'tag_guid' + '}', CGI.escape(tag_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tagging
    # Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
    # @param tagging_guid [String] The unique id for a &#x60;tagging&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tagging(tagging_guid, user_guid, opts = {})
      delete_tagging_with_http_info(tagging_guid, user_guid, opts)
      nil
    end

    # Delete tagging
    # Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
    # @param tagging_guid [String] The unique id for a &#x60;tagging&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tagging_with_http_info(tagging_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_tagging ...'
      end
      # verify the required parameter 'tagging_guid' is set
      if @api_client.config.client_side_validation && tagging_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tagging_guid' when calling MxPlatformApi.delete_tagging"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_tagging"
      end
      # resource path
      local_var_path = '/users/{user_guid}/taggings/{tagging_guid}'.sub('{' + 'tagging_guid' + '}', CGI.escape(tagging_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_tagging",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_tagging\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete transaction rule
    # Use this endpoint to permanently delete a transaction rule based on its unique GUID.
    # @param transaction_rule_guid [String] The unique id for a &#x60;transaction_rule&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transaction_rule(transaction_rule_guid, user_guid, opts = {})
      delete_transaction_rule_with_http_info(transaction_rule_guid, user_guid, opts)
      nil
    end

    # Delete transaction rule
    # Use this endpoint to permanently delete a transaction rule based on its unique GUID.
    # @param transaction_rule_guid [String] The unique id for a &#x60;transaction_rule&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transaction_rule_with_http_info(transaction_rule_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_transaction_rule ...'
      end
      # verify the required parameter 'transaction_rule_guid' is set
      if @api_client.config.client_side_validation && transaction_rule_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_rule_guid' when calling MxPlatformApi.delete_transaction_rule"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_transaction_rule"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transaction_rules/{transaction_rule_guid}'.sub('{' + 'transaction_rule_guid' + '}', CGI.escape(transaction_rule_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_transaction_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_transaction_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete user
    # Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user(user_guid, opts = {})
      delete_user_with_http_info(user_guid, opts)
      nil
    end

    # Delete user
    # Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.delete_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.delete_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # (Deprecated) Request an authorization code.
    # (This endpoint is deprecated. Clients should use `/authorization_code`.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
    # @param payment_processor_authorization_code_request_body [PaymentProcessorAuthorizationCodeRequestBody] The scope for the authorization code.
    # @param [Hash] opts the optional parameters
    # @return [PaymentProcessorAuthorizationCodeResponseBody]
    def deprecated_request_payment_processor_authorization_code(payment_processor_authorization_code_request_body, opts = {})
      data, _status_code, _headers = deprecated_request_payment_processor_authorization_code_with_http_info(payment_processor_authorization_code_request_body, opts)
      data
    end

    # (Deprecated) Request an authorization code.
    # (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
    # @param payment_processor_authorization_code_request_body [PaymentProcessorAuthorizationCodeRequestBody] The scope for the authorization code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentProcessorAuthorizationCodeResponseBody, Integer, Hash)>] PaymentProcessorAuthorizationCodeResponseBody data, response status code and response headers
    def deprecated_request_payment_processor_authorization_code_with_http_info(payment_processor_authorization_code_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.deprecated_request_payment_processor_authorization_code ...'
      end
      # verify the required parameter 'payment_processor_authorization_code_request_body' is set
      if @api_client.config.client_side_validation && payment_processor_authorization_code_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'payment_processor_authorization_code_request_body' when calling MxPlatformApi.deprecated_request_payment_processor_authorization_code"
      end
      # resource path
      local_var_path = '/payment_processor_authorization_code'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payment_processor_authorization_code_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentProcessorAuthorizationCodeResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.deprecated_request_payment_processor_authorization_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#deprecated_request_payment_processor_authorization_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download statement pdf
    # Use this endpoint to download a specified statement PDF.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param statement_guid [String] The unique id for a &#x60;statement&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_statement_pdf(member_guid, statement_guid, user_guid, opts = {})
      data, _status_code, _headers = download_statement_pdf_with_http_info(member_guid, statement_guid, user_guid, opts)
      data
    end

    # Download statement pdf
    # Use this endpoint to download a specified statement PDF.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param statement_guid [String] The unique id for a &#x60;statement&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_statement_pdf_with_http_info(member_guid, statement_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.download_statement_pdf ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.download_statement_pdf"
      end
      # verify the required parameter 'statement_guid' is set
      if @api_client.config.client_side_validation && statement_guid.nil?
        fail ArgumentError, "Missing the required parameter 'statement_guid' when calling MxPlatformApi.download_statement_pdf"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.download_statement_pdf"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/statements/{statement_guid}.pdf'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'statement_guid' + '}', CGI.escape(statement_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.download_statement_pdf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#download_statement_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a Tax Document PDF
    # Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
    # @param tax_document_guid [String] The unique id for a &#x60;tax_document&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_tax_document(tax_document_guid, member_guid, user_guid, opts = {})
      data, _status_code, _headers = download_tax_document_with_http_info(tax_document_guid, member_guid, user_guid, opts)
      data
    end

    # Download a Tax Document PDF
    # Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
    # @param tax_document_guid [String] The unique id for a &#x60;tax_document&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_tax_document_with_http_info(tax_document_guid, member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.download_tax_document ...'
      end
      # verify the required parameter 'tax_document_guid' is set
      if @api_client.config.client_side_validation && tax_document_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tax_document_guid' when calling MxPlatformApi.download_tax_document"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.download_tax_document"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.download_tax_document"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}.pdf'.sub('{' + 'tax_document_guid' + '}', CGI.escape(tax_document_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.download_tax_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#download_tax_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enhance transactions
    # Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
    # @param enhance_transactions_request_body [EnhanceTransactionsRequestBody] Transaction object to be enhanced
    # @param [Hash] opts the optional parameters
    # @return [EnhanceTransactionsResponseBody]
    def enhance_transactions(enhance_transactions_request_body, opts = {})
      data, _status_code, _headers = enhance_transactions_with_http_info(enhance_transactions_request_body, opts)
      data
    end

    # Enhance transactions
    # Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
    # @param enhance_transactions_request_body [EnhanceTransactionsRequestBody] Transaction object to be enhanced
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnhanceTransactionsResponseBody, Integer, Hash)>] EnhanceTransactionsResponseBody data, response status code and response headers
    def enhance_transactions_with_http_info(enhance_transactions_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.enhance_transactions ...'
      end
      # verify the required parameter 'enhance_transactions_request_body' is set
      if @api_client.config.client_side_validation && enhance_transactions_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'enhance_transactions_request_body' when calling MxPlatformApi.enhance_transactions"
      end
      # resource path
      local_var_path = '/transactions/enhance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enhance_transactions_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'EnhanceTransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.enhance_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#enhance_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extend history
    # Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
    # @param member_guid [String] The unique identifier for a &#x60;member&#x60;.
    # @param user_guid [String] The unique identifier for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def extend_history(member_guid, user_guid, opts = {})
      data, _status_code, _headers = extend_history_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Extend history
    # Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
    # @param member_guid [String] The unique identifier for a &#x60;member&#x60;.
    # @param user_guid [String] The unique identifier for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def extend_history_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.extend_history ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.extend_history"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.extend_history"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/extend_history'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.extend_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#extend_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch statements
    # Use this endpoint to fetch the statements associated with a particular member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def fetch_statements(member_guid, user_guid, opts = {})
      data, _status_code, _headers = fetch_statements_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Fetch statements
    # Use this endpoint to fetch the statements associated with a particular member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def fetch_statements_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.fetch_statements ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.fetch_statements"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.fetch_statements"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/fetch_statements'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.fetch_statements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#fetch_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Tax Documents
    # Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def fetch_tax_documents(member_guid, user_guid, opts = {})
      data, _status_code, _headers = fetch_tax_documents_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Fetch Tax Documents
    # Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def fetch_tax_documents_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.fetch_tax_documents ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.fetch_tax_documents"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.fetch_tax_documents"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/fetch_tax_documents'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.fetch_tax_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#fetch_tax_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify member
    # The identify endpoint begins an identification process for an already-existing member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def identify_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = identify_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Identify member
    # The identify endpoint begins an identification process for an already-existing member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def identify_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.identify_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.identify_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.identify_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/identify'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.identify_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#identify_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List account numbers by account
    # This endpoint returns a list of account numbers associated with the specified `account`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountNumbersResponseBody]
    def list_account_numbers_by_account(account_guid, user_guid, opts = {})
      data, _status_code, _headers = list_account_numbers_by_account_with_http_info(account_guid, user_guid, opts)
      data
    end

    # List account numbers by account
    # This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountNumbersResponseBody, Integer, Hash)>] AccountNumbersResponseBody data, response status code and response headers
    def list_account_numbers_by_account_with_http_info(account_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_account_numbers_by_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.list_account_numbers_by_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_account_numbers_by_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}/account_numbers'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountNumbersResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_account_numbers_by_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_account_numbers_by_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List account numbers by member
    # This endpoint returns a list of account numbers associated with the specified `member`.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountNumbersResponseBody]
    def list_account_numbers_by_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_account_numbers_by_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List account numbers by member
    # This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountNumbersResponseBody, Integer, Hash)>] AccountNumbersResponseBody data, response status code and response headers
    def list_account_numbers_by_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_account_numbers_by_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_account_numbers_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_account_numbers_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/account_numbers'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountNumbersResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_account_numbers_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_account_numbers_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List account owners by member
    # This endpoint returns an array with information about every account associated with a particular member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountOwnersResponseBody]
    def list_account_owners_by_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_account_owners_by_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List account owners by member
    # This endpoint returns an array with information about every account associated with a particular member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountOwnersResponseBody, Integer, Hash)>] AccountOwnersResponseBody data, response status code and response headers
    def list_account_owners_by_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_account_owners_by_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_account_owners_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_account_owners_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/account_owners'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountOwnersResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_account_owners_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_account_owners_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List categories
    # Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [CategoriesResponseBody]
    def list_categories(user_guid, opts = {})
      data, _status_code, _headers = list_categories_with_http_info(user_guid, opts)
      data
    end

    # List categories
    # Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(CategoriesResponseBody, Integer, Hash)>] CategoriesResponseBody data, response status code and response headers
    def list_categories_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_categories ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_categories"
      end
      # resource path
      local_var_path = '/users/{user_guid}/categories'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoriesResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List default categories
    # Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [CategoriesResponseBody]
    def list_default_categories(opts = {})
      data, _status_code, _headers = list_default_categories_with_http_info(opts)
      data
    end

    # List default categories
    # Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(CategoriesResponseBody, Integer, Hash)>] CategoriesResponseBody data, response status code and response headers
    def list_default_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_default_categories ...'
      end
      # resource path
      local_var_path = '/categories/default'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoriesResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_default_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_default_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List default categories by user
    # Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [CategoriesResponseBody]
    def list_default_categories_by_user(user_guid, opts = {})
      data, _status_code, _headers = list_default_categories_by_user_with_http_info(user_guid, opts)
      data
    end

    # List default categories by user
    # Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(CategoriesResponseBody, Integer, Hash)>] CategoriesResponseBody data, response status code and response headers
    def list_default_categories_by_user_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_default_categories_by_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_default_categories_by_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}/categories/default'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoriesResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_default_categories_by_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_default_categories_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List favorite institutions
    # This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [InstitutionsResponseBody]
    def list_favorite_institutions(opts = {})
      data, _status_code, _headers = list_favorite_institutions_with_http_info(opts)
      data
    end

    # List favorite institutions
    # This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(InstitutionsResponseBody, Integer, Hash)>] InstitutionsResponseBody data, response status code and response headers
    def list_favorite_institutions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_favorite_institutions ...'
      end
      # resource path
      local_var_path = '/institutions/favorites'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstitutionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_favorite_institutions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_favorite_institutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List holdings
    # This endpoint returns all holdings associated with the specified `user` across all accounts and members.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter holdings from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter holdings to this date.
    # @return [HoldingsResponseBody]
    def list_holdings(user_guid, opts = {})
      data, _status_code, _headers = list_holdings_with_http_info(user_guid, opts)
      data
    end

    # List holdings
    # This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter holdings from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter holdings to this date.
    # @return [Array<(HoldingsResponseBody, Integer, Hash)>] HoldingsResponseBody data, response status code and response headers
    def list_holdings_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_holdings ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_holdings"
      end
      # resource path
      local_var_path = '/users/{user_guid}/holdings'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HoldingsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_holdings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List holdings by account
    # This endpoint returns all holdings associated with the specified `account`.
    # @param account_guid [String] The unique id for the &#x60;account&#x60;.
    # @param user_guid [String] The unique id for the &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter holdings from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter holdings to this date.
    # @return [HoldingsResponseBody]
    def list_holdings_by_account(account_guid, user_guid, opts = {})
      data, _status_code, _headers = list_holdings_by_account_with_http_info(account_guid, user_guid, opts)
      data
    end

    # List holdings by account
    # This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
    # @param account_guid [String] The unique id for the &#x60;account&#x60;.
    # @param user_guid [String] The unique id for the &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter holdings from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter holdings to this date.
    # @return [Array<(HoldingsResponseBody, Integer, Hash)>] HoldingsResponseBody data, response status code and response headers
    def list_holdings_by_account_with_http_info(account_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_holdings_by_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.list_holdings_by_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_holdings_by_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}/holdings'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HoldingsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_holdings_by_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_holdings_by_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List holdings by member
    # This endpoint returns all holdings associated with the specified `member` across all accounts.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter holdings from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter holdings to this date.
    # @return [HoldingsResponseBody]
    def list_holdings_by_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_holdings_by_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List holdings by member
    # This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter holdings from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter holdings to this date.
    # @return [Array<(HoldingsResponseBody, Integer, Hash)>] HoldingsResponseBody data, response status code and response headers
    def list_holdings_by_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_holdings_by_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_holdings_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_holdings_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/holdings'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HoldingsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_holdings_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_holdings_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List institution credentials
    # Use this endpoint to see which credentials will be needed to create a member for a specific institution.
    # @param institution_code [String] The institution_code of the institution.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [CredentialsResponseBody]
    def list_institution_credentials(institution_code, opts = {})
      data, _status_code, _headers = list_institution_credentials_with_http_info(institution_code, opts)
      data
    end

    # List institution credentials
    # Use this endpoint to see which credentials will be needed to create a member for a specific institution.
    # @param institution_code [String] The institution_code of the institution.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(CredentialsResponseBody, Integer, Hash)>] CredentialsResponseBody data, response status code and response headers
    def list_institution_credentials_with_http_info(institution_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_institution_credentials ...'
      end
      # verify the required parameter 'institution_code' is set
      if @api_client.config.client_side_validation && institution_code.nil?
        fail ArgumentError, "Missing the required parameter 'institution_code' when calling MxPlatformApi.list_institution_credentials"
      end
      # resource path
      local_var_path = '/institutions/{institution_code}/credentials'.sub('{' + 'institution_code' + '}', CGI.escape(institution_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CredentialsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_institution_credentials",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_institution_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List institutions
    # This endpoint returns a list of institutions based on the specified search term or parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name This will list only institutions in which the appended string appears.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [Boolean] :supports_account_identification Filter only institutions which support account identification.
    # @option opts [Boolean] :supports_account_statement Filter only institutions which support account statements.
    # @option opts [Boolean] :supports_account_verification Filter only institutions which support account verification.
    # @option opts [Boolean] :supports_transaction_history Filter only institutions which support extended transaction history.
    # @return [InstitutionsResponseBody]
    def list_institutions(opts = {})
      data, _status_code, _headers = list_institutions_with_http_info(opts)
      data
    end

    # List institutions
    # This endpoint returns a list of institutions based on the specified search term or parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name This will list only institutions in which the appended string appears.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [Boolean] :supports_account_identification Filter only institutions which support account identification.
    # @option opts [Boolean] :supports_account_statement Filter only institutions which support account statements.
    # @option opts [Boolean] :supports_account_verification Filter only institutions which support account verification.
    # @option opts [Boolean] :supports_transaction_history Filter only institutions which support extended transaction history.
    # @return [Array<(InstitutionsResponseBody, Integer, Hash)>] InstitutionsResponseBody data, response status code and response headers
    def list_institutions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_institutions ...'
      end
      # resource path
      local_var_path = '/institutions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'supports_account_identification'] = opts[:'supports_account_identification'] if !opts[:'supports_account_identification'].nil?
      query_params[:'supports_account_statement'] = opts[:'supports_account_statement'] if !opts[:'supports_account_statement'].nil?
      query_params[:'supports_account_verification'] = opts[:'supports_account_verification'] if !opts[:'supports_account_verification'].nil?
      query_params[:'supports_transaction_history'] = opts[:'supports_transaction_history'] if !opts[:'supports_transaction_history'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstitutionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_institutions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_institutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List managed accounts
    # Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountsResponseBody]
    def list_managed_accounts(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_managed_accounts_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List managed accounts
    # Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountsResponseBody, Integer, Hash)>] AccountsResponseBody data, response status code and response headers
    def list_managed_accounts_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_managed_accounts ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_managed_accounts"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_managed_accounts"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_managed_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_managed_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List managed institutions
    # This endpoint returns a list of institutions which can be used to create partner-managed members.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [InstitutionsResponseBody]
    def list_managed_institutions(opts = {})
      data, _status_code, _headers = list_managed_institutions_with_http_info(opts)
      data
    end

    # List managed institutions
    # This endpoint returns a list of institutions which can be used to create partner-managed members.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(InstitutionsResponseBody, Integer, Hash)>] InstitutionsResponseBody data, response status code and response headers
    def list_managed_institutions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_managed_institutions ...'
      end
      # resource path
      local_var_path = '/managed_institutions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstitutionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_managed_institutions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_managed_institutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List managed members
    # This endpoint returns a list of all the partner-managed members associated with the specified `user`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [MembersResponseBody]
    def list_managed_members(user_guid, opts = {})
      data, _status_code, _headers = list_managed_members_with_http_info(user_guid, opts)
      data
    end

    # List managed members
    # This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(MembersResponseBody, Integer, Hash)>] MembersResponseBody data, response status code and response headers
    def list_managed_members_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_managed_members ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_managed_members"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_managed_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_managed_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List managed transactions
    # This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [TransactionsResponseBody]
    def list_managed_transactions(account_guid, member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_managed_transactions_with_http_info(account_guid, member_guid, user_guid, opts)
      data
    end

    # List managed transactions
    # This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(TransactionsResponseBody, Integer, Hash)>] TransactionsResponseBody data, response status code and response headers
    def list_managed_transactions_with_http_info(account_guid, member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_managed_transactions ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.list_managed_transactions"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_managed_transactions"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_managed_transactions"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_managed_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_managed_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accounts by member
    # This endpoint returns a list of all the accounts associated with the specified `member`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :member_is_managed_by_user List only accounts whose member is managed by the user.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountsResponseBody]
    def list_member_accounts(user_guid, member_guid, opts = {})
      data, _status_code, _headers = list_member_accounts_with_http_info(user_guid, member_guid, opts)
      data
    end

    # List accounts by member
    # This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :member_is_managed_by_user List only accounts whose member is managed by the user.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountsResponseBody, Integer, Hash)>] AccountsResponseBody data, response status code and response headers
    def list_member_accounts_with_http_info(user_guid, member_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_member_accounts ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_member_accounts"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_member_accounts"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/accounts'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'member_is_managed_by_user'] = opts[:'member_is_managed_by_user'] if !opts[:'member_is_managed_by_user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_member_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_member_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List member challenges
    # Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [ChallengesResponseBody]
    def list_member_challenges(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_member_challenges_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List member challenges
    # Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(ChallengesResponseBody, Integer, Hash)>] ChallengesResponseBody data, response status code and response headers
    def list_member_challenges_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_member_challenges ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_member_challenges"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_member_challenges"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/challenges'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChallengesResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_member_challenges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_member_challenges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List member credentials
    # This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [CredentialsResponseBody]
    def list_member_credentials(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_member_credentials_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List member credentials
    # This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(CredentialsResponseBody, Integer, Hash)>] CredentialsResponseBody data, response status code and response headers
    def list_member_credentials_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_member_credentials ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_member_credentials"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_member_credentials"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/credentials'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CredentialsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_member_credentials",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_member_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List members
    # This endpoint returns an array which contains information on every member associated with a specific user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [MembersResponseBody]
    def list_members(user_guid, opts = {})
      data, _status_code, _headers = list_members_with_http_info(user_guid, opts)
      data
    end

    # List members
    # This endpoint returns an array which contains information on every member associated with a specific user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(MembersResponseBody, Integer, Hash)>] MembersResponseBody data, response status code and response headers
    def list_members_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_members ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_members"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List merchants
    # This endpoint returns a paginated list of all the merchants in the MX system.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [MerchantsResponseBody]
    def list_merchants(opts = {})
      data, _status_code, _headers = list_merchants_with_http_info(opts)
      data
    end

    # List merchants
    # This endpoint returns a paginated list of all the merchants in the MX system.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(MerchantsResponseBody, Integer, Hash)>] MerchantsResponseBody data, response status code and response headers
    def list_merchants_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_merchants ...'
      end
      # resource path
      local_var_path = '/merchants'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_merchants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_merchants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List statements by member
    # Use this endpoint to get an array of available statements.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [StatementsResponseBody]
    def list_statements_by_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_statements_by_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List statements by member
    # Use this endpoint to get an array of available statements.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(StatementsResponseBody, Integer, Hash)>] StatementsResponseBody data, response status code and response headers
    def list_statements_by_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_statements_by_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_statements_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_statements_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/statements'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StatementsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_statements_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_statements_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List taggings
    # Use this endpoint to retrieve a list of all the taggings associated with a specific user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [TaggingsResponseBody]
    def list_taggings(user_guid, opts = {})
      data, _status_code, _headers = list_taggings_with_http_info(user_guid, opts)
      data
    end

    # List taggings
    # Use this endpoint to retrieve a list of all the taggings associated with a specific user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(TaggingsResponseBody, Integer, Hash)>] TaggingsResponseBody data, response status code and response headers
    def list_taggings_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_taggings ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_taggings"
      end
      # resource path
      local_var_path = '/users/{user_guid}/taggings'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaggingsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_taggings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_taggings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List tags
    # Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [TagsResponseBody]
    def list_tags(user_guid, opts = {})
      data, _status_code, _headers = list_tags_with_http_info(user_guid, opts)
      data
    end

    # List tags
    # Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(TagsResponseBody, Integer, Hash)>] TagsResponseBody data, response status code and response headers
    def list_tags_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_tags ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_tags"
      end
      # resource path
      local_var_path = '/users/{user_guid}/tags'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TagsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tax Documents
    # Use this endpoint to get a paginated list of tax documents.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [TaxDocumentsResponseBody]
    def list_tax_documents(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_tax_documents_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List Tax Documents
    # Use this endpoint to get a paginated list of tax documents.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(TaxDocumentsResponseBody, Integer, Hash)>] TaxDocumentsResponseBody data, response status code and response headers
    def list_tax_documents_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_tax_documents ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_tax_documents"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_tax_documents"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/tax_documents'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaxDocumentsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_tax_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_tax_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transaction rules
    # Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [TransactionRulesResponseBody]
    def list_transaction_rules(user_guid, opts = {})
      data, _status_code, _headers = list_transaction_rules_with_http_info(user_guid, opts)
      data
    end

    # List transaction rules
    # Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(TransactionRulesResponseBody, Integer, Hash)>] TransactionRulesResponseBody data, response status code and response headers
    def list_transaction_rules_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_transaction_rules ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_transaction_rules"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transaction_rules'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionRulesResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_transaction_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_transaction_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions
    # Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [TransactionsResponseBody]
    def list_transactions(user_guid, opts = {})
      data, _status_code, _headers = list_transactions_with_http_info(user_guid, opts)
      data
    end

    # List transactions
    # Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [Array<(TransactionsResponseBody, Integer, Hash)>] TransactionsResponseBody data, response status code and response headers
    def list_transactions_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_transactions ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_transactions"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transactions'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions by account
    # This endpoint returns a list of the last 90 days of transactions associated with the specified account.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [TransactionsResponseBody]
    def list_transactions_by_account(account_guid, user_guid, opts = {})
      data, _status_code, _headers = list_transactions_by_account_with_http_info(account_guid, user_guid, opts)
      data
    end

    # List transactions by account
    # This endpoint returns a list of the last 90 days of transactions associated with the specified account.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [Array<(TransactionsResponseBody, Integer, Hash)>] TransactionsResponseBody data, response status code and response headers
    def list_transactions_by_account_with_http_info(account_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_transactions_by_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.list_transactions_by_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_transactions_by_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}/transactions'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_transactions_by_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_transactions_by_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions by member
    # Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [TransactionsResponseBody]
    def list_transactions_by_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = list_transactions_by_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # List transactions by member
    # Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [Array<(TransactionsResponseBody, Integer, Hash)>] TransactionsResponseBody data, response status code and response headers
    def list_transactions_by_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_transactions_by_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.list_transactions_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_transactions_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/transactions'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_transactions_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_transactions_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions by tag
    # Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [TransactionsResponseBody]
    def list_transactions_by_tag(tag_guid, user_guid, opts = {})
      data, _status_code, _headers = list_transactions_by_tag_with_http_info(tag_guid, user_guid, opts)
      data
    end

    # List transactions by tag
    # Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_date Filter transactions from this date.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :to_date Filter transactions to this date.
    # @return [Array<(TransactionsResponseBody, Integer, Hash)>] TransactionsResponseBody data, response status code and response headers
    def list_transactions_by_tag_with_http_info(tag_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_transactions_by_tag ...'
      end
      # verify the required parameter 'tag_guid' is set
      if @api_client.config.client_side_validation && tag_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tag_guid' when calling MxPlatformApi.list_transactions_by_tag"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_transactions_by_tag"
      end
      # resource path
      local_var_path = '/users/{user_guid}/tags/{tag_guid}/transactions'.sub('{' + 'tag_guid' + '}', CGI.escape(tag_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_transactions_by_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_transactions_by_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accounts
    # This endpoint returns a list of all the accounts associated with the specified `user`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :member_is_managed_by_user List only accounts whose member is managed by the user.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Boolean] :is_manual List only accounts that were manually created.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountsResponseBody]
    def list_user_accounts(user_guid, opts = {})
      data, _status_code, _headers = list_user_accounts_with_http_info(user_guid, opts)
      data
    end

    # List accounts
    # This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :member_is_managed_by_user List only accounts whose member is managed by the user.
    # @option opts [Integer] :page Specify current page.
    # @option opts [Boolean] :is_manual List only accounts that were manually created.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountsResponseBody, Integer, Hash)>] AccountsResponseBody data, response status code and response headers
    def list_user_accounts_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_user_accounts ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.list_user_accounts"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'member_is_managed_by_user'] = opts[:'member_is_managed_by_user'] if !opts[:'member_is_managed_by_user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'is_manual'] = opts[:'is_manual'] if !opts[:'is_manual'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_user_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_user_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users
    # Use this endpoint to list every user you've created in the MX Platform API.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :id The user &#x60;id&#x60; to search for.
    # @option opts [String] :email The user &#x60;email&#x60; to search for.
    # @option opts [Boolean] :is_disabled Search for users that are diabled.
    # @return [UsersResponseBody]
    def list_users(opts = {})
      data, _status_code, _headers = list_users_with_http_info(opts)
      data
    end

    # List users
    # Use this endpoint to list every user you&#39;ve created in the MX Platform API.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @option opts [String] :id The user &#x60;id&#x60; to search for.
    # @option opts [String] :email The user &#x60;email&#x60; to search for.
    # @option opts [Boolean] :is_disabled Search for users that are diabled.
    # @return [Array<(UsersResponseBody, Integer, Hash)>] UsersResponseBody data, response status code and response headers
    def list_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.list_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'is_disabled'] = opts[:'is_disabled'] if !opts[:'is_disabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.list_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read account
    # This endpoint returns the specified `account` resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def read_account(account_guid, user_guid, opts = {})
      data, _status_code, _headers = read_account_with_http_info(account_guid, user_guid, opts)
      data
    end

    # Read account
    # This endpoint returns the specified &#x60;account&#x60; resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def read_account_with_http_info(account_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.read_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read account by member
    # This endpoint allows you to read the attributes of an `account` resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def read_account_by_member(account_guid, member_guid, user_guid, opts = {})
      data, _status_code, _headers = read_account_by_member_with_http_info(account_guid, member_guid, user_guid, opts)
      data
    end

    # Read account by member
    # This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def read_account_by_member_with_http_info(account_guid, member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_account_by_member ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.read_account_by_member"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_account_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_account_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_account_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_account_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a custom category
    # Use this endpoint to read the attributes of either a default category or a custom category.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [CategoryResponseBody]
    def read_category(category_guid, user_guid, opts = {})
      data, _status_code, _headers = read_category_with_http_info(category_guid, user_guid, opts)
      data
    end

    # Read a custom category
    # Use this endpoint to read the attributes of either a default category or a custom category.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryResponseBody, Integer, Hash)>] CategoryResponseBody data, response status code and response headers
    def read_category_with_http_info(category_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_category ...'
      end
      # verify the required parameter 'category_guid' is set
      if @api_client.config.client_side_validation && category_guid.nil?
        fail ArgumentError, "Missing the required parameter 'category_guid' when calling MxPlatformApi.read_category"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_category"
      end
      # resource path
      local_var_path = '/users/{user_guid}/categories/{category_guid}'.sub('{' + 'category_guid' + '}', CGI.escape(category_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a default category
    # Use this endpoint to read the attributes of a default category.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [CategoryResponseBody]
    def read_default_category(category_guid, opts = {})
      data, _status_code, _headers = read_default_category_with_http_info(category_guid, opts)
      data
    end

    # Read a default category
    # Use this endpoint to read the attributes of a default category.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryResponseBody, Integer, Hash)>] CategoryResponseBody data, response status code and response headers
    def read_default_category_with_http_info(category_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_default_category ...'
      end
      # verify the required parameter 'category_guid' is set
      if @api_client.config.client_side_validation && category_guid.nil?
        fail ArgumentError, "Missing the required parameter 'category_guid' when calling MxPlatformApi.read_default_category"
      end
      # resource path
      local_var_path = '/categories/{category_guid}'.sub('{' + 'category_guid' + '}', CGI.escape(category_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_default_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_default_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read holding
    # Use this endpoint to read the attributes of a specific `holding`.
    # @param holding_guid [String] The unique id for a &#x60;holding&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [HoldingResponseBody]
    def read_holding(holding_guid, user_guid, opts = {})
      data, _status_code, _headers = read_holding_with_http_info(holding_guid, user_guid, opts)
      data
    end

    # Read holding
    # Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
    # @param holding_guid [String] The unique id for a &#x60;holding&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HoldingResponseBody, Integer, Hash)>] HoldingResponseBody data, response status code and response headers
    def read_holding_with_http_info(holding_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_holding ...'
      end
      # verify the required parameter 'holding_guid' is set
      if @api_client.config.client_side_validation && holding_guid.nil?
        fail ArgumentError, "Missing the required parameter 'holding_guid' when calling MxPlatformApi.read_holding"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_holding"
      end
      # resource path
      local_var_path = '/users/{user_guid}/holdings/{holding_guid}'.sub('{' + 'holding_guid' + '}', CGI.escape(holding_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HoldingResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_holding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read institution
    # This endpoint returns information about the institution specified by `institution_code`.
    # @param institution_code [String] The institution_code of the institution.
    # @param [Hash] opts the optional parameters
    # @return [InstitutionResponseBody]
    def read_institution(institution_code, opts = {})
      data, _status_code, _headers = read_institution_with_http_info(institution_code, opts)
      data
    end

    # Read institution
    # This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
    # @param institution_code [String] The institution_code of the institution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstitutionResponseBody, Integer, Hash)>] InstitutionResponseBody data, response status code and response headers
    def read_institution_with_http_info(institution_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_institution ...'
      end
      # verify the required parameter 'institution_code' is set
      if @api_client.config.client_side_validation && institution_code.nil?
        fail ArgumentError, "Missing the required parameter 'institution_code' when calling MxPlatformApi.read_institution"
      end
      # resource path
      local_var_path = '/institutions/{institution_code}'.sub('{' + 'institution_code' + '}', CGI.escape(institution_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstitutionResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_institution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_institution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read managed account
    # Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def read_managed_account(account_guid, member_guid, user_guid, opts = {})
      data, _status_code, _headers = read_managed_account_with_http_info(account_guid, member_guid, user_guid, opts)
      data
    end

    # Read managed account
    # Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def read_managed_account_with_http_info(account_guid, member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_managed_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.read_managed_account"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_managed_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_managed_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_managed_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_managed_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read managed member
    # This endpoint returns the attributes of the specified partner-managed `member`.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def read_managed_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = read_managed_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Read managed member
    # This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def read_managed_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_managed_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_managed_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_managed_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_managed_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_managed_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read managed transaction
    # Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponseBody]
    def read_managed_transaction(account_guid, member_guid, transaction_guid, user_guid, opts = {})
      data, _status_code, _headers = read_managed_transaction_with_http_info(account_guid, member_guid, transaction_guid, user_guid, opts)
      data
    end

    # Read managed transaction
    # Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponseBody, Integer, Hash)>] TransactionResponseBody data, response status code and response headers
    def read_managed_transaction_with_http_info(account_guid, member_guid, transaction_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_managed_transaction ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.read_managed_transaction"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_managed_transaction"
      end
      # verify the required parameter 'transaction_guid' is set
      if @api_client.config.client_side_validation && transaction_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_guid' when calling MxPlatformApi.read_managed_transaction"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_managed_transaction"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'transaction_guid' + '}', CGI.escape(transaction_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_managed_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_managed_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read member
    # Use this endpoint to read the attributes of a specific member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def read_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = read_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Read member
    # Use this endpoint to read the attributes of a specific member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def read_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read member status
    # This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberStatusResponseBody]
    def read_member_status(member_guid, user_guid, opts = {})
      data, _status_code, _headers = read_member_status_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Read member status
    # This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberStatusResponseBody, Integer, Hash)>] MemberStatusResponseBody data, response status code and response headers
    def read_member_status_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_member_status ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_member_status"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_member_status"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/status'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberStatusResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_member_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_member_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read merchant
    # Returns information about a particular merchant, such as a logo, name, and website.
    # @param merchant_guid [String] The unique id for a &#x60;merchant&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MerchantResponseBody]
    def read_merchant(merchant_guid, opts = {})
      data, _status_code, _headers = read_merchant_with_http_info(merchant_guid, opts)
      data
    end

    # Read merchant
    # Returns information about a particular merchant, such as a logo, name, and website.
    # @param merchant_guid [String] The unique id for a &#x60;merchant&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MerchantResponseBody, Integer, Hash)>] MerchantResponseBody data, response status code and response headers
    def read_merchant_with_http_info(merchant_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_merchant ...'
      end
      # verify the required parameter 'merchant_guid' is set
      if @api_client.config.client_side_validation && merchant_guid.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_guid' when calling MxPlatformApi.read_merchant"
      end
      # resource path
      local_var_path = '/merchants/{merchant_guid}'.sub('{' + 'merchant_guid' + '}', CGI.escape(merchant_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_merchant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_merchant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read merchant location
    # This endpoint returns the specified merchant_location resource.
    # @param merchant_location_guid [String] The unique id for a &#x60;merchant_location&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MerchantLocationResponseBody]
    def read_merchant_location(merchant_location_guid, opts = {})
      data, _status_code, _headers = read_merchant_location_with_http_info(merchant_location_guid, opts)
      data
    end

    # Read merchant location
    # This endpoint returns the specified merchant_location resource.
    # @param merchant_location_guid [String] The unique id for a &#x60;merchant_location&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MerchantLocationResponseBody, Integer, Hash)>] MerchantLocationResponseBody data, response status code and response headers
    def read_merchant_location_with_http_info(merchant_location_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_merchant_location ...'
      end
      # verify the required parameter 'merchant_location_guid' is set
      if @api_client.config.client_side_validation && merchant_location_guid.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_location_guid' when calling MxPlatformApi.read_merchant_location"
      end
      # resource path
      local_var_path = '/merchant_locations/{merchant_location_guid}'.sub('{' + 'merchant_location_guid' + '}', CGI.escape(merchant_location_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantLocationResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_merchant_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_merchant_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read statement by member
    # Use this endpoint to read a JSON representation of the statement.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param statement_guid [String] The unique id for a &#x60;statement&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [StatementResponseBody]
    def read_statement_by_member(member_guid, statement_guid, user_guid, opts = {})
      data, _status_code, _headers = read_statement_by_member_with_http_info(member_guid, statement_guid, user_guid, opts)
      data
    end

    # Read statement by member
    # Use this endpoint to read a JSON representation of the statement.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param statement_guid [String] The unique id for a &#x60;statement&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StatementResponseBody, Integer, Hash)>] StatementResponseBody data, response status code and response headers
    def read_statement_by_member_with_http_info(member_guid, statement_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_statement_by_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_statement_by_member"
      end
      # verify the required parameter 'statement_guid' is set
      if @api_client.config.client_side_validation && statement_guid.nil?
        fail ArgumentError, "Missing the required parameter 'statement_guid' when calling MxPlatformApi.read_statement_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_statement_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/statements/{statement_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'statement_guid' + '}', CGI.escape(statement_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StatementResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_statement_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_statement_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read tag
    # Use this endpoint to read the attributes of a particular tag according to its unique GUID.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [TagResponseBody]
    def read_tag(tag_guid, user_guid, opts = {})
      data, _status_code, _headers = read_tag_with_http_info(tag_guid, user_guid, opts)
      data
    end

    # Read tag
    # Use this endpoint to read the attributes of a particular tag according to its unique GUID.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagResponseBody, Integer, Hash)>] TagResponseBody data, response status code and response headers
    def read_tag_with_http_info(tag_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_tag ...'
      end
      # verify the required parameter 'tag_guid' is set
      if @api_client.config.client_side_validation && tag_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tag_guid' when calling MxPlatformApi.read_tag"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_tag"
      end
      # resource path
      local_var_path = '/users/{user_guid}/tags/{tag_guid}'.sub('{' + 'tag_guid' + '}', CGI.escape(tag_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TagResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read tagging
    # Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
    # @param tagging_guid [String] The unique id for a &#x60;tagging&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [TaggingResponseBody]
    def read_tagging(tagging_guid, user_guid, opts = {})
      data, _status_code, _headers = read_tagging_with_http_info(tagging_guid, user_guid, opts)
      data
    end

    # Read tagging
    # Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
    # @param tagging_guid [String] The unique id for a &#x60;tagging&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaggingResponseBody, Integer, Hash)>] TaggingResponseBody data, response status code and response headers
    def read_tagging_with_http_info(tagging_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_tagging ...'
      end
      # verify the required parameter 'tagging_guid' is set
      if @api_client.config.client_side_validation && tagging_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tagging_guid' when calling MxPlatformApi.read_tagging"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_tagging"
      end
      # resource path
      local_var_path = '/users/{user_guid}/taggings/{tagging_guid}'.sub('{' + 'tagging_guid' + '}', CGI.escape(tagging_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaggingResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_tagging",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_tagging\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a Tax Document
    # Use this endpoint to read the attributes of the specified tax document.
    # @param tax_document_guid [String] The unique id for a &#x60;tax_document&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [TaxDocumentResponseBody]
    def read_tax_document(tax_document_guid, member_guid, user_guid, opts = {})
      data, _status_code, _headers = read_tax_document_with_http_info(tax_document_guid, member_guid, user_guid, opts)
      data
    end

    # Read a Tax Document
    # Use this endpoint to read the attributes of the specified tax document.
    # @param tax_document_guid [String] The unique id for a &#x60;tax_document&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaxDocumentResponseBody, Integer, Hash)>] TaxDocumentResponseBody data, response status code and response headers
    def read_tax_document_with_http_info(tax_document_guid, member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_tax_document ...'
      end
      # verify the required parameter 'tax_document_guid' is set
      if @api_client.config.client_side_validation && tax_document_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tax_document_guid' when calling MxPlatformApi.read_tax_document"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.read_tax_document"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_tax_document"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}'.sub('{' + 'tax_document_guid' + '}', CGI.escape(tax_document_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaxDocumentResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_tax_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_tax_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read transaction
    # Requests to this endpoint will return the attributes of the specified `transaction`.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponseBody]
    def read_transaction(transaction_guid, user_guid, opts = {})
      data, _status_code, _headers = read_transaction_with_http_info(transaction_guid, user_guid, opts)
      data
    end

    # Read transaction
    # Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponseBody, Integer, Hash)>] TransactionResponseBody data, response status code and response headers
    def read_transaction_with_http_info(transaction_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_transaction ...'
      end
      # verify the required parameter 'transaction_guid' is set
      if @api_client.config.client_side_validation && transaction_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_guid' when calling MxPlatformApi.read_transaction"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_transaction"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transactions/{transaction_guid}'.sub('{' + 'transaction_guid' + '}', CGI.escape(transaction_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read transaction rule
    # Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
    # @param transaction_rule_guid [String] The unique id for a &#x60;transaction_rule&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [TransactionRuleResponseBody]
    def read_transaction_rule(transaction_rule_guid, user_guid, opts = {})
      data, _status_code, _headers = read_transaction_rule_with_http_info(transaction_rule_guid, user_guid, opts)
      data
    end

    # Read transaction rule
    # Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
    # @param transaction_rule_guid [String] The unique id for a &#x60;transaction_rule&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionRuleResponseBody, Integer, Hash)>] TransactionRuleResponseBody data, response status code and response headers
    def read_transaction_rule_with_http_info(transaction_rule_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_transaction_rule ...'
      end
      # verify the required parameter 'transaction_rule_guid' is set
      if @api_client.config.client_side_validation && transaction_rule_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_rule_guid' when calling MxPlatformApi.read_transaction_rule"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_transaction_rule"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transaction_rules/{transaction_rule_guid}'.sub('{' + 'transaction_rule_guid' + '}', CGI.escape(transaction_rule_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionRuleResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_transaction_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_transaction_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read user
    # Use this endpoint to read the attributes of a specific user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [UserResponseBody]
    def read_user(user_guid, opts = {})
      data, _status_code, _headers = read_user_with_http_info(user_guid, opts)
      data
    end

    # Read user
    # Use this endpoint to read the attributes of a specific user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponseBody, Integer, Hash)>] UserResponseBody data, response status code and response headers
    def read_user_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.read_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.read_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.read_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#read_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request an authorization code.
    # Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
    # @param authorization_code_request_body [AuthorizationCodeRequestBody] The scope for the authorization code.
    # @param [Hash] opts the optional parameters
    # @return [AuthorizationCodeResponseBody]
    def request_authorization_code(authorization_code_request_body, opts = {})
      data, _status_code, _headers = request_authorization_code_with_http_info(authorization_code_request_body, opts)
      data
    end

    # Request an authorization code.
    # Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
    # @param authorization_code_request_body [AuthorizationCodeRequestBody] The scope for the authorization code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthorizationCodeResponseBody, Integer, Hash)>] AuthorizationCodeResponseBody data, response status code and response headers
    def request_authorization_code_with_http_info(authorization_code_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.request_authorization_code ...'
      end
      # verify the required parameter 'authorization_code_request_body' is set
      if @api_client.config.client_side_validation && authorization_code_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_code_request_body' when calling MxPlatformApi.request_authorization_code"
      end
      # resource path
      local_var_path = '/authorization_code'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(authorization_code_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthorizationCodeResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.request_authorization_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#request_authorization_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request connect widget url
    # This endpoint will return a URL for an embeddable version of MX Connect.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param connect_widget_request_body [ConnectWidgetRequestBody] Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
    # @param [Hash] opts the optional parameters
    # @return [ConnectWidgetResponseBody]
    def request_connect_widget_url(user_guid, connect_widget_request_body, opts = {})
      data, _status_code, _headers = request_connect_widget_url_with_http_info(user_guid, connect_widget_request_body, opts)
      data
    end

    # Request connect widget url
    # This endpoint will return a URL for an embeddable version of MX Connect.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param connect_widget_request_body [ConnectWidgetRequestBody] Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectWidgetResponseBody, Integer, Hash)>] ConnectWidgetResponseBody data, response status code and response headers
    def request_connect_widget_url_with_http_info(user_guid, connect_widget_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.request_connect_widget_url ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.request_connect_widget_url"
      end
      # verify the required parameter 'connect_widget_request_body' is set
      if @api_client.config.client_side_validation && connect_widget_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'connect_widget_request_body' when calling MxPlatformApi.request_connect_widget_url"
      end
      # resource path
      local_var_path = '/users/{user_guid}/connect_widget_url'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connect_widget_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectWidgetResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.request_connect_widget_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#request_connect_widget_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request oauth window uri
    # This endpoint will generate an `oauth_window_uri` for the specified `member`.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
    # @option opts [String] :enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent.
    # @option opts [String] :referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
    # @option opts [Boolean] :skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
    # @option opts [String] :ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
    # @return [OAuthWindowResponseBody]
    def request_o_auth_window_uri(member_guid, user_guid, opts = {})
      data, _status_code, _headers = request_o_auth_window_uri_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Request oauth window uri
    # This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
    # @option opts [String] :enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent.
    # @option opts [String] :referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
    # @option opts [Boolean] :skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
    # @option opts [String] :ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
    # @return [Array<(OAuthWindowResponseBody, Integer, Hash)>] OAuthWindowResponseBody data, response status code and response headers
    def request_o_auth_window_uri_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.request_o_auth_window_uri ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.request_o_auth_window_uri"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.request_o_auth_window_uri"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/oauth_window_uri'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_redirect_url'] = opts[:'client_redirect_url'] if !opts[:'client_redirect_url'].nil?
      query_params[:'enable_app2app'] = opts[:'enable_app2app'] if !opts[:'enable_app2app'].nil?
      query_params[:'referral_source'] = opts[:'referral_source'] if !opts[:'referral_source'].nil?
      query_params[:'skip_aggregation'] = opts[:'skip_aggregation'] if !opts[:'skip_aggregation'].nil?
      query_params[:'ui_message_webview_url_scheme'] = opts[:'ui_message_webview_url_scheme'] if !opts[:'ui_message_webview_url_scheme'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthWindowResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.request_o_auth_window_uri",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#request_o_auth_window_uri\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request widget url
    # This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param widget_request_body [WidgetRequestBody] The widget url configuration options.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language The desired language of the widget.
    # @return [WidgetResponseBody]
    def request_widget_url(user_guid, widget_request_body, opts = {})
      data, _status_code, _headers = request_widget_url_with_http_info(user_guid, widget_request_body, opts)
      data
    end

    # Request widget url
    # This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param widget_request_body [WidgetRequestBody] The widget url configuration options.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language The desired language of the widget.
    # @return [Array<(WidgetResponseBody, Integer, Hash)>] WidgetResponseBody data, response status code and response headers
    def request_widget_url_with_http_info(user_guid, widget_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.request_widget_url ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.request_widget_url"
      end
      # verify the required parameter 'widget_request_body' is set
      if @api_client.config.client_side_validation && widget_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'widget_request_body' when calling MxPlatformApi.request_widget_url"
      end
      # resource path
      local_var_path = '/users/{user_guid}/widget_urls'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(widget_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'WidgetResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.request_widget_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#request_widget_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume aggregation
    # This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_resume_request_body [MemberResumeRequestBody] Member object with MFA challenge answers
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def resume_aggregation(member_guid, user_guid, member_resume_request_body, opts = {})
      data, _status_code, _headers = resume_aggregation_with_http_info(member_guid, user_guid, member_resume_request_body, opts)
      data
    end

    # Resume aggregation
    # This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_resume_request_body [MemberResumeRequestBody] Member object with MFA challenge answers
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def resume_aggregation_with_http_info(member_guid, user_guid, member_resume_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.resume_aggregation ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.resume_aggregation"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.resume_aggregation"
      end
      # verify the required parameter 'member_resume_request_body' is set
      if @api_client.config.client_side_validation && member_resume_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'member_resume_request_body' when calling MxPlatformApi.resume_aggregation"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/resume'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(member_resume_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.resume_aggregation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#resume_aggregation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account by member
    # This endpoint allows you to update certain attributes of an `account` resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param account_update_request_body [AccountUpdateRequestBody] Account object to be created with optional parameters (is_hidden)
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def update_account_by_member(account_guid, member_guid, user_guid, account_update_request_body, opts = {})
      data, _status_code, _headers = update_account_by_member_with_http_info(account_guid, member_guid, user_guid, account_update_request_body, opts)
      data
    end

    # Update account by member
    # This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param account_update_request_body [AccountUpdateRequestBody] Account object to be created with optional parameters (is_hidden)
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def update_account_by_member_with_http_info(account_guid, member_guid, user_guid, account_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_account_by_member ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.update_account_by_member"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.update_account_by_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_account_by_member"
      end
      # verify the required parameter 'account_update_request_body' is set
      if @api_client.config.client_side_validation && account_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'account_update_request_body' when calling MxPlatformApi.update_account_by_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_account_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_account_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update category
    # Use this endpoint to update the attributes of a custom category according to its unique GUID.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param category_update_request_body [CategoryUpdateRequestBody] Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
    # @param [Hash] opts the optional parameters
    # @return [CategoryResponseBody]
    def update_category(category_guid, user_guid, category_update_request_body, opts = {})
      data, _status_code, _headers = update_category_with_http_info(category_guid, user_guid, category_update_request_body, opts)
      data
    end

    # Update category
    # Use this endpoint to update the attributes of a custom category according to its unique GUID.
    # @param category_guid [String] The unique id for a &#x60;category&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param category_update_request_body [CategoryUpdateRequestBody] Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryResponseBody, Integer, Hash)>] CategoryResponseBody data, response status code and response headers
    def update_category_with_http_info(category_guid, user_guid, category_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_category ...'
      end
      # verify the required parameter 'category_guid' is set
      if @api_client.config.client_side_validation && category_guid.nil?
        fail ArgumentError, "Missing the required parameter 'category_guid' when calling MxPlatformApi.update_category"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_category"
      end
      # verify the required parameter 'category_update_request_body' is set
      if @api_client.config.client_side_validation && category_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'category_update_request_body' when calling MxPlatformApi.update_category"
      end
      # resource path
      local_var_path = '/users/{user_guid}/categories/{category_guid}'.sub('{' + 'category_guid' + '}', CGI.escape(category_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(category_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update managed account
    # Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_account_update_request_body [ManagedAccountUpdateRequestBody] Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [AccountResponseBody]
    def update_managed_account(account_guid, member_guid, user_guid, managed_account_update_request_body, opts = {})
      data, _status_code, _headers = update_managed_account_with_http_info(account_guid, member_guid, user_guid, managed_account_update_request_body, opts)
      data
    end

    # Update managed account
    # Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_account_update_request_body [ManagedAccountUpdateRequestBody] Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponseBody, Integer, Hash)>] AccountResponseBody data, response status code and response headers
    def update_managed_account_with_http_info(account_guid, member_guid, user_guid, managed_account_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_managed_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.update_managed_account"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.update_managed_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_managed_account"
      end
      # verify the required parameter 'managed_account_update_request_body' is set
      if @api_client.config.client_side_validation && managed_account_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'managed_account_update_request_body' when calling MxPlatformApi.update_managed_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(managed_account_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_managed_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_managed_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update managed member
    # Use this endpoint to update the attributes of the specified partner_managed `member`.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_member_update_request_body [ManagedMemberUpdateRequestBody] Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def update_managed_member(member_guid, user_guid, managed_member_update_request_body, opts = {})
      data, _status_code, _headers = update_managed_member_with_http_info(member_guid, user_guid, managed_member_update_request_body, opts)
      data
    end

    # Update managed member
    # Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_member_update_request_body [ManagedMemberUpdateRequestBody] Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def update_managed_member_with_http_info(member_guid, user_guid, managed_member_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_managed_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.update_managed_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_managed_member"
      end
      # verify the required parameter 'managed_member_update_request_body' is set
      if @api_client.config.client_side_validation && managed_member_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'managed_member_update_request_body' when calling MxPlatformApi.update_managed_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(managed_member_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_managed_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_managed_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update managed transaction
    # Use this endpoint to update the attributes of the specified partner_managed `transaction`.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_transaction_update_request_body [ManagedTransactionUpdateRequestBody] Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponseBody]
    def update_managed_transaction(account_guid, member_guid, transaction_guid, user_guid, managed_transaction_update_request_body, opts = {})
      data, _status_code, _headers = update_managed_transaction_with_http_info(account_guid, member_guid, transaction_guid, user_guid, managed_transaction_update_request_body, opts)
      data
    end

    # Update managed transaction
    # Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
    # @param account_guid [String] The unique id for an &#x60;account&#x60;.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param managed_transaction_update_request_body [ManagedTransactionUpdateRequestBody] Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponseBody, Integer, Hash)>] TransactionResponseBody data, response status code and response headers
    def update_managed_transaction_with_http_info(account_guid, member_guid, transaction_guid, user_guid, managed_transaction_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_managed_transaction ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling MxPlatformApi.update_managed_transaction"
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.update_managed_transaction"
      end
      # verify the required parameter 'transaction_guid' is set
      if @api_client.config.client_side_validation && transaction_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_guid' when calling MxPlatformApi.update_managed_transaction"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_managed_transaction"
      end
      # verify the required parameter 'managed_transaction_update_request_body' is set
      if @api_client.config.client_side_validation && managed_transaction_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'managed_transaction_update_request_body' when calling MxPlatformApi.update_managed_transaction"
      end
      # resource path
      local_var_path = '/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'transaction_guid' + '}', CGI.escape(transaction_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(managed_transaction_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_managed_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_managed_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update member
    # Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_update_request_body [MemberUpdateRequestBody] Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def update_member(member_guid, user_guid, member_update_request_body, opts = {})
      data, _status_code, _headers = update_member_with_http_info(member_guid, user_guid, member_update_request_body, opts)
      data
    end

    # Update member
    # Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param member_update_request_body [MemberUpdateRequestBody] Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def update_member_with_http_info(member_guid, user_guid, member_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.update_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_member"
      end
      # verify the required parameter 'member_update_request_body' is set
      if @api_client.config.client_side_validation && member_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'member_update_request_body' when calling MxPlatformApi.update_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(member_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update tag
    # Use this endpoint to update the name of a specific tag according to its unique GUID.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tag_update_request_body [TagUpdateRequestBody] Tag object to be updated with required parameter (tag_guid)
    # @param [Hash] opts the optional parameters
    # @return [TagResponseBody]
    def update_tag(tag_guid, user_guid, tag_update_request_body, opts = {})
      data, _status_code, _headers = update_tag_with_http_info(tag_guid, user_guid, tag_update_request_body, opts)
      data
    end

    # Update tag
    # Use this endpoint to update the name of a specific tag according to its unique GUID.
    # @param tag_guid [String] The unique id for a &#x60;tag&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tag_update_request_body [TagUpdateRequestBody] Tag object to be updated with required parameter (tag_guid)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagResponseBody, Integer, Hash)>] TagResponseBody data, response status code and response headers
    def update_tag_with_http_info(tag_guid, user_guid, tag_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_tag ...'
      end
      # verify the required parameter 'tag_guid' is set
      if @api_client.config.client_side_validation && tag_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tag_guid' when calling MxPlatformApi.update_tag"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_tag"
      end
      # verify the required parameter 'tag_update_request_body' is set
      if @api_client.config.client_side_validation && tag_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'tag_update_request_body' when calling MxPlatformApi.update_tag"
      end
      # resource path
      local_var_path = '/users/{user_guid}/tags/{tag_guid}'.sub('{' + 'tag_guid' + '}', CGI.escape(tag_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tag_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TagResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update tagging
    # Use this endpoint to update a tagging.
    # @param tagging_guid [String] The unique id for a &#x60;tagging&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tagging_update_request_body [TaggingUpdateRequestBody] Tagging object to be updated with required parameter (tag_guid)
    # @param [Hash] opts the optional parameters
    # @return [TaggingResponseBody]
    def update_tagging(tagging_guid, user_guid, tagging_update_request_body, opts = {})
      data, _status_code, _headers = update_tagging_with_http_info(tagging_guid, user_guid, tagging_update_request_body, opts)
      data
    end

    # Update tagging
    # Use this endpoint to update a tagging.
    # @param tagging_guid [String] The unique id for a &#x60;tagging&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param tagging_update_request_body [TaggingUpdateRequestBody] Tagging object to be updated with required parameter (tag_guid)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaggingResponseBody, Integer, Hash)>] TaggingResponseBody data, response status code and response headers
    def update_tagging_with_http_info(tagging_guid, user_guid, tagging_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_tagging ...'
      end
      # verify the required parameter 'tagging_guid' is set
      if @api_client.config.client_side_validation && tagging_guid.nil?
        fail ArgumentError, "Missing the required parameter 'tagging_guid' when calling MxPlatformApi.update_tagging"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_tagging"
      end
      # verify the required parameter 'tagging_update_request_body' is set
      if @api_client.config.client_side_validation && tagging_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'tagging_update_request_body' when calling MxPlatformApi.update_tagging"
      end
      # resource path
      local_var_path = '/users/{user_guid}/taggings/{tagging_guid}'.sub('{' + 'tagging_guid' + '}', CGI.escape(tagging_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tagging_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TaggingResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_tagging",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_tagging\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update transaction
    # Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param transaction_update_request_body [TransactionUpdateRequestBody] Transaction object to be updated with a new description
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponseBody]
    def update_transaction(transaction_guid, user_guid, transaction_update_request_body, opts = {})
      data, _status_code, _headers = update_transaction_with_http_info(transaction_guid, user_guid, transaction_update_request_body, opts)
      data
    end

    # Update transaction
    # Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
    # @param transaction_guid [String] The unique id for a &#x60;transaction&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param transaction_update_request_body [TransactionUpdateRequestBody] Transaction object to be updated with a new description
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponseBody, Integer, Hash)>] TransactionResponseBody data, response status code and response headers
    def update_transaction_with_http_info(transaction_guid, user_guid, transaction_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_transaction ...'
      end
      # verify the required parameter 'transaction_guid' is set
      if @api_client.config.client_side_validation && transaction_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_guid' when calling MxPlatformApi.update_transaction"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_transaction"
      end
      # verify the required parameter 'transaction_update_request_body' is set
      if @api_client.config.client_side_validation && transaction_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_update_request_body' when calling MxPlatformApi.update_transaction"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transactions/{transaction_guid}'.sub('{' + 'transaction_guid' + '}', CGI.escape(transaction_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transaction_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update transaction_rule
    # Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
    # @param transaction_rule_guid [String] The unique id for a &#x60;transaction_rule&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param transaction_rule_update_request_body [TransactionRuleUpdateRequestBody] TransactionRule object to be updated
    # @param [Hash] opts the optional parameters
    # @return [TransactionRuleResponseBody]
    def update_transaction_rule(transaction_rule_guid, user_guid, transaction_rule_update_request_body, opts = {})
      data, _status_code, _headers = update_transaction_rule_with_http_info(transaction_rule_guid, user_guid, transaction_rule_update_request_body, opts)
      data
    end

    # Update transaction_rule
    # Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
    # @param transaction_rule_guid [String] The unique id for a &#x60;transaction_rule&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param transaction_rule_update_request_body [TransactionRuleUpdateRequestBody] TransactionRule object to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionRuleResponseBody, Integer, Hash)>] TransactionRuleResponseBody data, response status code and response headers
    def update_transaction_rule_with_http_info(transaction_rule_guid, user_guid, transaction_rule_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_transaction_rule ...'
      end
      # verify the required parameter 'transaction_rule_guid' is set
      if @api_client.config.client_side_validation && transaction_rule_guid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_rule_guid' when calling MxPlatformApi.update_transaction_rule"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_transaction_rule"
      end
      # verify the required parameter 'transaction_rule_update_request_body' is set
      if @api_client.config.client_side_validation && transaction_rule_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_rule_update_request_body' when calling MxPlatformApi.update_transaction_rule"
      end
      # resource path
      local_var_path = '/users/{user_guid}/transaction_rules/{transaction_rule_guid}'.sub('{' + 'transaction_rule_guid' + '}', CGI.escape(transaction_rule_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transaction_rule_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionRuleResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_transaction_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_transaction_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user
    # Use this endpoint to update the attributes of the specified user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param user_update_request_body [UserUpdateRequestBody] User object to be updated (None of these parameters are required, but the user object cannot be empty.)
    # @param [Hash] opts the optional parameters
    # @return [UserResponseBody]
    def update_user(user_guid, user_update_request_body, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user_guid, user_update_request_body, opts)
      data
    end

    # Update user
    # Use this endpoint to update the attributes of the specified user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param user_update_request_body [UserUpdateRequestBody] User object to be updated (None of these parameters are required, but the user object cannot be empty.)
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponseBody, Integer, Hash)>] UserResponseBody data, response status code and response headers
    def update_user_with_http_info(user_guid, user_update_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.update_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.update_user"
      end
      # verify the required parameter 'user_update_request_body' is set
      if @api_client.config.client_side_validation && user_update_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'user_update_request_body' when calling MxPlatformApi.update_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_update_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify member
    # The verify endpoint begins a verification process for a member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MemberResponseBody]
    def verify_member(member_guid, user_guid, opts = {})
      data, _status_code, _headers = verify_member_with_http_info(member_guid, user_guid, opts)
      data
    end

    # Verify member
    # The verify endpoint begins a verification process for a member.
    # @param member_guid [String] The unique id for a &#x60;member&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberResponseBody, Integer, Hash)>] MemberResponseBody data, response status code and response headers
    def verify_member_with_http_info(member_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MxPlatformApi.verify_member ...'
      end
      # verify the required parameter 'member_guid' is set
      if @api_client.config.client_side_validation && member_guid.nil?
        fail ArgumentError, "Missing the required parameter 'member_guid' when calling MxPlatformApi.verify_member"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling MxPlatformApi.verify_member"
      end
      # resource path
      local_var_path = '/users/{user_guid}/members/{member_guid}/verify'.sub('{' + 'member_guid' + '}', CGI.escape(member_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MxPlatformApi.verify_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MxPlatformApi#verify_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
