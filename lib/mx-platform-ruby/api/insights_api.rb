=begin
#MX Platform API

#The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module MxPlatformRuby
  class InsightsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all accounts associated with an insight.
    # Use this endpoint to list all the accounts associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [AccountsResponseBody]
    def list_accounts_insight(user_guid, insight_guid, opts = {})
      data, _status_code, _headers = list_accounts_insight_with_http_info(user_guid, insight_guid, opts)
      data
    end

    # List all accounts associated with an insight.
    # Use this endpoint to list all the accounts associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(AccountsResponseBody, Integer, Hash)>] AccountsResponseBody data, response status code and response headers
    def list_accounts_insight_with_http_info(user_guid, insight_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_accounts_insight ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_accounts_insight"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.list_accounts_insight"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights/{insight_guid}/accounts'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_accounts_insight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_accounts_insight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all categories associated with an insight.
    # Use this endpoint to list all the categories associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [CategoriesResponseBody]
    def list_categories_insight(user_guid, insight_guid, opts = {})
      data, _status_code, _headers = list_categories_insight_with_http_info(user_guid, insight_guid, opts)
      data
    end

    # List all categories associated with an insight.
    # Use this endpoint to list all the categories associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(CategoriesResponseBody, Integer, Hash)>] CategoriesResponseBody data, response status code and response headers
    def list_categories_insight_with_http_info(user_guid, insight_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_categories_insight ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_categories_insight"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.list_categories_insight"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights/{insight_guid}/categories'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoriesResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_categories_insight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_categories_insight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List insights by account
    # Use this endpoint to list all insights associated with a specified account GUID.
    # @param account_guid [String] The unique id for the &#x60;account&#x60;.
    # @param user_guid [String] The unique id for the &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [InsightsResponseBody]
    def list_insights_by_account(account_guid, user_guid, opts = {})
      data, _status_code, _headers = list_insights_by_account_with_http_info(account_guid, user_guid, opts)
      data
    end

    # List insights by account
    # Use this endpoint to list all insights associated with a specified account GUID.
    # @param account_guid [String] The unique id for the &#x60;account&#x60;.
    # @param user_guid [String] The unique id for the &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(InsightsResponseBody, Integer, Hash)>] InsightsResponseBody data, response status code and response headers
    def list_insights_by_account_with_http_info(account_guid, user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_insights_by_account ...'
      end
      # verify the required parameter 'account_guid' is set
      if @api_client.config.client_side_validation && account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'account_guid' when calling InsightsApi.list_insights_by_account"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_insights_by_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/accounts/{account_guid}/insights'.sub('{' + 'account_guid' + '}', CGI.escape(account_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InsightsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_insights_by_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_insights_by_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all insights for a user.
    # Use this endpoint to list all the insights associated with the user.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [InsightsResponseBody]
    def list_insights_user(user_guid, opts = {})
      data, _status_code, _headers = list_insights_user_with_http_info(user_guid, opts)
      data
    end

    # List all insights for a user.
    # Use this endpoint to list all the insights associated with the user.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(InsightsResponseBody, Integer, Hash)>] InsightsResponseBody data, response status code and response headers
    def list_insights_user_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_insights_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_insights_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InsightsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_insights_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_insights_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all merchants associated with an insight.
    # Use this endpoint to list all the merchants associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [MerchantsResponseBody]
    def list_merchants_insight(user_guid, insight_guid, opts = {})
      data, _status_code, _headers = list_merchants_insight_with_http_info(user_guid, insight_guid, opts)
      data
    end

    # List all merchants associated with an insight.
    # Use this endpoint to list all the merchants associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(MerchantsResponseBody, Integer, Hash)>] MerchantsResponseBody data, response status code and response headers
    def list_merchants_insight_with_http_info(user_guid, insight_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_merchants_insight ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_merchants_insight"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.list_merchants_insight"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights/{insight_guid}/merchants'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_merchants_insight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_merchants_insight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all scheduled payments associated with an insight
    # Use this endpoint to list all the scheduled payments associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [ScheduledPaymentsResponseBody]
    def list_scheduled_payments_insight(user_guid, insight_guid, opts = {})
      data, _status_code, _headers = list_scheduled_payments_insight_with_http_info(user_guid, insight_guid, opts)
      data
    end

    # List all scheduled payments associated with an insight
    # Use this endpoint to list all the scheduled payments associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(ScheduledPaymentsResponseBody, Integer, Hash)>] ScheduledPaymentsResponseBody data, response status code and response headers
    def list_scheduled_payments_insight_with_http_info(user_guid, insight_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_scheduled_payments_insight ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_scheduled_payments_insight"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.list_scheduled_payments_insight"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights/{insight_guid}/scheduled_payments'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScheduledPaymentsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_scheduled_payments_insight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_scheduled_payments_insight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all transactions associated with an insight.
    # Use this endpoint to list all the transactions associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [TransactionsResponseBody]
    def list_transactions_insight(user_guid, insight_guid, opts = {})
      data, _status_code, _headers = list_transactions_insight_with_http_info(user_guid, insight_guid, opts)
      data
    end

    # List all transactions associated with an insight.
    # Use this endpoint to list all the transactions associated with the insight.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(TransactionsResponseBody, Integer, Hash)>] TransactionsResponseBody data, response status code and response headers
    def list_transactions_insight_with_http_info(user_guid, insight_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.list_transactions_insight ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.list_transactions_insight"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.list_transactions_insight"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights/{insight_guid}/transactions'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.list_transactions_insight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#list_transactions_insight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific insight.
    # Use this endpoint to read the attributes of a specific insight according to its unique GUID.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @return [InsightResponseBody]
    def read_insights_user(user_guid, insight_guid, opts = {})
      data, _status_code, _headers = read_insights_user_with_http_info(user_guid, insight_guid, opts)
      data
    end

    # Read a specific insight.
    # Use this endpoint to read the attributes of a specific insight according to its unique GUID.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsightResponseBody, Integer, Hash)>] InsightResponseBody data, response status code and response headers
    def read_insights_user_with_http_info(user_guid, insight_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.read_insights_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.read_insights_user"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.read_insights_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights{insight_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InsightResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.read_insights_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#read_insights_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update insight
    # Use this endpoint to update the attributes of a particular insight according to its unique GUID.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param insight_update_request [InsightUpdateRequest] The insight to be updated (None of these parameters are required, but the user object cannot be empty.)
    # @param [Hash] opts the optional parameters
    # @return [InsightResponse]
    def update_insight(user_guid, insight_guid, insight_update_request, opts = {})
      data, _status_code, _headers = update_insight_with_http_info(user_guid, insight_guid, insight_update_request, opts)
      data
    end

    # Update insight
    # Use this endpoint to update the attributes of a particular insight according to its unique GUID.
    # @param user_guid [String] The unique identifier for the user. Defined by MX.
    # @param insight_guid [String] The unique identifier for the insight. Defined by MX.
    # @param insight_update_request [InsightUpdateRequest] The insight to be updated (None of these parameters are required, but the user object cannot be empty.)
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsightResponse, Integer, Hash)>] InsightResponse data, response status code and response headers
    def update_insight_with_http_info(user_guid, insight_guid, insight_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.update_insight ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling InsightsApi.update_insight"
      end
      # verify the required parameter 'insight_guid' is set
      if @api_client.config.client_side_validation && insight_guid.nil?
        fail ArgumentError, "Missing the required parameter 'insight_guid' when calling InsightsApi.update_insight"
      end
      # verify the required parameter 'insight_update_request' is set
      if @api_client.config.client_side_validation && insight_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'insight_update_request' when calling InsightsApi.update_insight"
      end
      # resource path
      local_var_path = '/users/{user_guid}/insights{insight_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'insight_guid' + '}', CGI.escape(insight_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(insight_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'InsightResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InsightsApi.update_insight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#update_insight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
