=begin
#MX Platform API

#The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module MxPlatformRuby
  class SpendingPlanApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create spending plan
    # This endpoint creates a new `spending_plan` for the user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [SpendingPlanResponse]
    def create_spending_plan(user_guid, opts = {})
      data, _status_code, _headers = create_spending_plan_with_http_info(user_guid, opts)
      data
    end

    # Create spending plan
    # This endpoint creates a new &#x60;spending_plan&#x60; for the user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpendingPlanResponse, Integer, Hash)>] SpendingPlanResponse data, response status code and response headers
    def create_spending_plan_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.create_spending_plan ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.create_spending_plan"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.create_spending_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#create_spending_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create spending plan iteration item
    # This endpoint creates a new `spending_plan_iteration_item`.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_iteration_item_create_request_body [SpendingPlanIterationItemCreateRequestBody] Iteration item to be created with required parameter (planned_amount)
    # @param [Hash] opts the optional parameters
    # @return [SpendingPlanIterationItemResponse]
    def create_spending_plan_iteration_item(spending_plan_guid, user_guid, spending_plan_iteration_item_create_request_body, opts = {})
      data, _status_code, _headers = create_spending_plan_iteration_item_with_http_info(spending_plan_guid, user_guid, spending_plan_iteration_item_create_request_body, opts)
      data
    end

    # Create spending plan iteration item
    # This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_iteration_item_create_request_body [SpendingPlanIterationItemCreateRequestBody] Iteration item to be created with required parameter (planned_amount)
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpendingPlanIterationItemResponse, Integer, Hash)>] SpendingPlanIterationItemResponse data, response status code and response headers
    def create_spending_plan_iteration_item_with_http_info(spending_plan_guid, user_guid, spending_plan_iteration_item_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.create_spending_plan_iteration_item ...'
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.create_spending_plan_iteration_item"
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.create_spending_plan_iteration_item"
      end
      # verify the required parameter 'spending_plan_iteration_item_create_request_body' is set
      if @api_client.config.client_side_validation && spending_plan_iteration_item_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_iteration_item_create_request_body' when calling SpendingPlanApi.create_spending_plan_iteration_item"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items'.sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spending_plan_iteration_item_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanIterationItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.create_spending_plan_iteration_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#create_spending_plan_iteration_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete spending plan
    # Use this endpoint to delete a user's `spending_plan`.
    # @param user_guid [String] The unique ID for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_spending_plan(user_guid, spending_plan_guid, opts = {})
      delete_spending_plan_with_http_info(user_guid, spending_plan_guid, opts)
      nil
    end

    # Delete spending plan
    # Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
    # @param user_guid [String] The unique ID for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_spending_plan_with_http_info(user_guid, spending_plan_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.delete_spending_plan ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.delete_spending_plan"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.delete_spending_plan"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.delete_spending_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#delete_spending_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete spending plan account
    # Use this endpoint to delete a `spending_plan_account`.
    # @param user_guid [String] The unique ID for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param spending_plan_account_guid [String] The unique ID for the specified account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_spending_plan_account(user_guid, spending_plan_guid, spending_plan_account_guid, opts = {})
      delete_spending_plan_account_with_http_info(user_guid, spending_plan_guid, spending_plan_account_guid, opts)
      nil
    end

    # Delete spending plan account
    # Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
    # @param user_guid [String] The unique ID for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param spending_plan_account_guid [String] The unique ID for the specified account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_spending_plan_account_with_http_info(user_guid, spending_plan_guid, spending_plan_account_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.delete_spending_plan_account ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.delete_spending_plan_account"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.delete_spending_plan_account"
      end
      # verify the required parameter 'spending_plan_account_guid' is set
      if @api_client.config.client_side_validation && spending_plan_account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_account_guid' when calling SpendingPlanApi.delete_spending_plan_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'spending_plan_account_guid' + '}', CGI.escape(spending_plan_account_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.delete_spending_plan_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#delete_spending_plan_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete spending plan iteration item
    # Use this endpoint to delete a spending plan `iteration_item`.
    # @param user_guid [String] The unique ID for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_item_guid [String] The unique ID for the &#x60;iteration_item&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_spending_plan_iteration_item(user_guid, spending_plan_guid, iteration_item_guid, opts = {})
      delete_spending_plan_iteration_item_with_http_info(user_guid, spending_plan_guid, iteration_item_guid, opts)
      nil
    end

    # Delete spending plan iteration item
    # Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
    # @param user_guid [String] The unique ID for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_item_guid [String] The unique ID for the &#x60;iteration_item&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_spending_plan_iteration_item_with_http_info(user_guid, spending_plan_guid, iteration_item_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.delete_spending_plan_iteration_item ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.delete_spending_plan_iteration_item"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.delete_spending_plan_iteration_item"
      end
      # verify the required parameter 'iteration_item_guid' is set
      if @api_client.config.client_side_validation && iteration_item_guid.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_item_guid' when calling SpendingPlanApi.delete_spending_plan_iteration_item"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'iteration_item_guid' + '}', CGI.escape(iteration_item_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.delete_spending_plan_iteration_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#delete_spending_plan_iteration_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List spending plan accounts
    # Use this endpoint to list all the spending plan accounts associated with the spending plan.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanAccountsResponse]
    def list_spending_plan_accounts(user_guid, spending_plan_guid, opts = {})
      data, _status_code, _headers = list_spending_plan_accounts_with_http_info(user_guid, spending_plan_guid, opts)
      data
    end

    # List spending plan accounts
    # Use this endpoint to list all the spending plan accounts associated with the spending plan.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanAccountsResponse, Integer, Hash)>] SpendingPlanAccountsResponse data, response status code and response headers
    def list_spending_plan_accounts_with_http_info(user_guid, spending_plan_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.list_spending_plan_accounts ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.list_spending_plan_accounts"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.list_spending_plan_accounts"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.list_spending_plan_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#list_spending_plan_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List spending plan iteration items
    # Use this endpoint to list all the spending plan `iteration_items` associated with the `iteration`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanIterationItemsResponseBody]
    def list_spending_plan_iteration_items(user_guid, spending_plan_guid, opts = {})
      data, _status_code, _headers = list_spending_plan_iteration_items_with_http_info(user_guid, spending_plan_guid, opts)
      data
    end

    # List spending plan iteration items
    # Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanIterationItemsResponseBody, Integer, Hash)>] SpendingPlanIterationItemsResponseBody data, response status code and response headers
    def list_spending_plan_iteration_items_with_http_info(user_guid, spending_plan_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.list_spending_plan_iteration_items ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.list_spending_plan_iteration_items"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.list_spending_plan_iteration_items"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanIterationItemsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.list_spending_plan_iteration_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#list_spending_plan_iteration_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List spending plan iterations
    # Use this endpoint to list all the spending plan `iterations` associated with the `spending_plan`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanIterationsResponse]
    def list_spending_plan_iterations(user_guid, spending_plan_guid, opts = {})
      data, _status_code, _headers = list_spending_plan_iterations_with_http_info(user_guid, spending_plan_guid, opts)
      data
    end

    # List spending plan iterations
    # Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanIterationsResponse, Integer, Hash)>] SpendingPlanIterationsResponse data, response status code and response headers
    def list_spending_plan_iterations_with_http_info(user_guid, spending_plan_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.list_spending_plan_iterations ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.list_spending_plan_iterations"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.list_spending_plan_iterations"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanIterationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.list_spending_plan_iterations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#list_spending_plan_iterations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List spending plans
    # Use this endpoint to list all the spending plans associated with the user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlansResponseBody]
    def list_spending_plans(user_guid, opts = {})
      data, _status_code, _headers = list_spending_plans_with_http_info(user_guid, opts)
      data
    end

    # List spending plans
    # Use this endpoint to list all the spending plans associated with the user.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlansResponseBody, Integer, Hash)>] SpendingPlansResponseBody data, response status code and response headers
    def list_spending_plans_with_http_info(user_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.list_spending_plans ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.list_spending_plans"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlansResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.list_spending_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#list_spending_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read spending plan account
    # Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param spending_plan_account_guid [String] The unique ID for the specified account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanAccountResponse]
    def read_spending_plan_account(user_guid, spending_plan_guid, spending_plan_account_guid, opts = {})
      data, _status_code, _headers = read_spending_plan_account_with_http_info(user_guid, spending_plan_guid, spending_plan_account_guid, opts)
      data
    end

    # Read spending plan account
    # Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param spending_plan_account_guid [String] The unique ID for the specified account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanAccountResponse, Integer, Hash)>] SpendingPlanAccountResponse data, response status code and response headers
    def read_spending_plan_account_with_http_info(user_guid, spending_plan_guid, spending_plan_account_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.read_spending_plan_account ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.read_spending_plan_account"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.read_spending_plan_account"
      end
      # verify the required parameter 'spending_plan_account_guid' is set
      if @api_client.config.client_side_validation && spending_plan_account_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_account_guid' when calling SpendingPlanApi.read_spending_plan_account"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'spending_plan_account_guid' + '}', CGI.escape(spending_plan_account_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.read_spending_plan_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#read_spending_plan_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a spending plan iteration
    # Use this endpoint to read the attributes of a specific spending plan `iteration` according to its `iteration_number`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_number [Integer] The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanIterationResponse]
    def read_spending_plan_iteration(user_guid, spending_plan_guid, iteration_number, opts = {})
      data, _status_code, _headers = read_spending_plan_iteration_with_http_info(user_guid, spending_plan_guid, iteration_number, opts)
      data
    end

    # Read a spending plan iteration
    # Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_number [Integer] The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanIterationResponse, Integer, Hash)>] SpendingPlanIterationResponse data, response status code and response headers
    def read_spending_plan_iteration_with_http_info(user_guid, spending_plan_guid, iteration_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.read_spending_plan_iteration ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.read_spending_plan_iteration"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.read_spending_plan_iteration"
      end
      # verify the required parameter 'iteration_number' is set
      if @api_client.config.client_side_validation && iteration_number.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_number' when calling SpendingPlanApi.read_spending_plan_iteration"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/{iteration_number}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'iteration_number' + '}', CGI.escape(iteration_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanIterationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.read_spending_plan_iteration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#read_spending_plan_iteration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a spending plan iteration item
    # Use this endpoint to read the attributes of a specific spending plan `iteration_item` according to its unique GUID.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_item_guid [String] The unique ID for the &#x60;iteration_item&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanIterationItemResponse]
    def read_spending_plan_iteration_item(user_guid, spending_plan_guid, iteration_item_guid, opts = {})
      data, _status_code, _headers = read_spending_plan_iteration_item_with_http_info(user_guid, spending_plan_guid, iteration_item_guid, opts)
      data
    end

    # Read a spending plan iteration item
    # Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_item_guid [String] The unique ID for the &#x60;iteration_item&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanIterationItemResponse, Integer, Hash)>] SpendingPlanIterationItemResponse data, response status code and response headers
    def read_spending_plan_iteration_item_with_http_info(user_guid, spending_plan_guid, iteration_item_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.read_spending_plan_iteration_item ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.read_spending_plan_iteration_item"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.read_spending_plan_iteration_item"
      end
      # verify the required parameter 'iteration_item_guid' is set
      if @api_client.config.client_side_validation && iteration_item_guid.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_item_guid' when calling SpendingPlanApi.read_spending_plan_iteration_item"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'iteration_item_guid' + '}', CGI.escape(iteration_item_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanIterationItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.read_spending_plan_iteration_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#read_spending_plan_iteration_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a spending plan for a user
    # Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [SpendingPlanResponse]
    def read_spending_plan_user(user_guid, spending_plan_guid, opts = {})
      data, _status_code, _headers = read_spending_plan_user_with_http_info(user_guid, spending_plan_guid, opts)
      data
    end

    # Read a spending plan for a user
    # Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Specify current page.
    # @option opts [Integer] :records_per_page Specify records per page.
    # @return [Array<(SpendingPlanResponse, Integer, Hash)>] SpendingPlanResponse data, response status code and response headers
    def read_spending_plan_user_with_http_info(user_guid, spending_plan_guid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.read_spending_plan_user ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.read_spending_plan_user"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.read_spending_plan_user"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'records_per_page'] = opts[:'records_per_page'] if !opts[:'records_per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.read_spending_plan_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#read_spending_plan_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a spending plan iteration item
    # Use this endpoint to update an existing `spending_plan_iteration_item`.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_item_guid [String] The unique ID for the &#x60;iteration_item&#x60;.
    # @param spending_plan_iteration_item_create_request_body [SpendingPlanIterationItemCreateRequestBody] Iteration item to be updated with required parameter (planned_amount)
    # @param [Hash] opts the optional parameters
    # @return [SpendingPlanIterationItemResponse]
    def update_spending_plan_iteration_item(user_guid, spending_plan_guid, iteration_item_guid, spending_plan_iteration_item_create_request_body, opts = {})
      data, _status_code, _headers = update_spending_plan_iteration_item_with_http_info(user_guid, spending_plan_guid, iteration_item_guid, spending_plan_iteration_item_create_request_body, opts)
      data
    end

    # Update a spending plan iteration item
    # Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
    # @param user_guid [String] The unique id for a &#x60;user&#x60;.
    # @param spending_plan_guid [String] The unique ID for the &#x60;spending_plan&#x60;.
    # @param iteration_item_guid [String] The unique ID for the &#x60;iteration_item&#x60;.
    # @param spending_plan_iteration_item_create_request_body [SpendingPlanIterationItemCreateRequestBody] Iteration item to be updated with required parameter (planned_amount)
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpendingPlanIterationItemResponse, Integer, Hash)>] SpendingPlanIterationItemResponse data, response status code and response headers
    def update_spending_plan_iteration_item_with_http_info(user_guid, spending_plan_guid, iteration_item_guid, spending_plan_iteration_item_create_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpendingPlanApi.update_spending_plan_iteration_item ...'
      end
      # verify the required parameter 'user_guid' is set
      if @api_client.config.client_side_validation && user_guid.nil?
        fail ArgumentError, "Missing the required parameter 'user_guid' when calling SpendingPlanApi.update_spending_plan_iteration_item"
      end
      # verify the required parameter 'spending_plan_guid' is set
      if @api_client.config.client_side_validation && spending_plan_guid.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_guid' when calling SpendingPlanApi.update_spending_plan_iteration_item"
      end
      # verify the required parameter 'iteration_item_guid' is set
      if @api_client.config.client_side_validation && iteration_item_guid.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_item_guid' when calling SpendingPlanApi.update_spending_plan_iteration_item"
      end
      # verify the required parameter 'spending_plan_iteration_item_create_request_body' is set
      if @api_client.config.client_side_validation && spending_plan_iteration_item_create_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'spending_plan_iteration_item_create_request_body' when calling SpendingPlanApi.update_spending_plan_iteration_item"
      end
      # resource path
      local_var_path = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}'.sub('{' + 'user_guid' + '}', CGI.escape(user_guid.to_s)).sub('{' + 'spending_plan_guid' + '}', CGI.escape(spending_plan_guid.to_s)).sub('{' + 'iteration_item_guid' + '}', CGI.escape(iteration_item_guid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.mx.api.v1+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spending_plan_iteration_item_create_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'SpendingPlanIterationItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SpendingPlanApi.update_spending_plan_iteration_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpendingPlanApi#update_spending_plan_iteration_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
