=begin
#MX Platform API

#The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for MxPlatformRuby::MxPlatformApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MxPlatformApi' do
  before do
    # run before each test
    @api_instance = MxPlatformRuby::MxPlatformApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MxPlatformApi' do
    it 'should create an instance of MxPlatformApi' do
      expect(@api_instance).to be_instance_of(MxPlatformRuby::MxPlatformApi)
    end
  end

  # unit tests for aggregate_member
  # Aggregate member
  # Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'aggregate_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_balances
  # Check balances
  # This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'check_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_category
  # Create category
  # Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param category_create_request_body Custom category object to be created
  # @param [Hash] opts the optional parameters
  # @return [CategoryResponseBody]
  describe 'create_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_managed_account
  # Create managed account
  # Use this endpoint to create a partner-managed account.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param managed_account_create_request_body Managed account to be created.
  # @param [Hash] opts the optional parameters
  # @return [AccountResponseBody]
  describe 'create_managed_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_managed_member
  # Create managed member
  # Use this endpoint to create a new partner-managed &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param managed_member_create_request_body Managed member to be created.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'create_managed_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_managed_transaction
  # Create managed transaction
  # Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param managed_transaction_create_request_body Managed transaction to be created.
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponseBody]
  describe 'create_managed_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_member
  # Create member
  # This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_create_request_body Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'create_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tag
  # Create tag
  # Use this endpoint to create a new custom tag.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param tag_create_request_body Tag object to be created with required parameters (tag_guid)
  # @param [Hash] opts the optional parameters
  # @return [TagResponseBody]
  describe 'create_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tagging
  # Create tagging
  # Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param tagging_create_request_body Tagging object to be created with required parameters (tag_guid and transaction_guid)
  # @param [Hash] opts the optional parameters
  # @return [TaggingResponseBody]
  describe 'create_tagging test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_transaction_rule
  # Create transaction rule
  # Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param transaction_rule_create_request_body TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
  # @param [Hash] opts the optional parameters
  # @return [TransactionRuleResponseBody]
  describe 'create_transaction_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_user
  # Create user
  # Call this endpoint to create a new user. The MX Platform API will respond with the newly-created user object if successful. This endpoint accepts several parameters - id, metadata, and is_disabled. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill.
  # @param user_create_request_body User object to be created. (None of these parameters are required, but the user object cannot be empty)
  # @param [Hash] opts the optional parameters
  # @return [UserResponseBody]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_category
  # Delete category
  # Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
  # @param category_guid The unique id for a &#x60;category&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_managed_account
  # Delete managed account
  # Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_managed_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_managed_member
  # Delete managed member
  # Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_managed_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_managed_transaction
  # Delete managed transaction
  # Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param transaction_guid The unique id for a &#x60;transaction&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_managed_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_member
  # Delete member
  # Accessing this endpoint will permanently delete a member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tag
  # Delete tag
  # Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
  # @param tag_guid The unique id for a &#x60;tag&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tagging
  # Delete tagging
  # Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
  # @param tagging_guid The unique id for a &#x60;tagging&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tagging test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_transaction_rule
  # Delete transaction rule
  # Use this endpoint to permanently delete a transaction rule based on its unique GUID.
  # @param transaction_rule_guid The unique id for a &#x60;transaction_rule&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_transaction_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user
  # Delete user
  # Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_statement_pdf
  # Download statement pdf
  # Use this endpoint to download a specified statement PDF.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param statement_guid The unique id for a &#x60;statement&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'download_statement_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enhance_transactions
  # Enhance transactions
  # Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
  # @param enhance_transactions_request_body Transaction object to be enhanced
  # @param [Hash] opts the optional parameters
  # @return [EnhanceTransactionsResponseBody]
  describe 'enhance_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for extend_history
  # Extend history
  # Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
  # @param member_guid The unique identifier for a &#x60;member&#x60;.
  # @param user_guid The unique identifier for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'extend_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_statements
  # Fetch statements
  # Use this endpoint to fetch the statements associated with a particular member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'fetch_statements test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for identify_member
  # Identify member
  # The identify endpoint begins an identification process for an already-existing member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'identify_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_account_numbers_by_account
  # List account numbers by account
  # This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [AccountNumbersResponseBody]
  describe 'list_account_numbers_by_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_account_numbers_by_member
  # List account numbers by member
  # This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [AccountNumbersResponseBody]
  describe 'list_account_numbers_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_account_owners_by_member
  # List account owners by member
  # This endpoint returns an array with information about every account associated with a particular member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [AccountOwnersResponseBody]
  describe 'list_account_owners_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_categories
  # List categories
  # Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [CategoriesResponseBody]
  describe 'list_categories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_default_categories
  # List default categories
  # Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [CategoriesResponseBody]
  describe 'list_default_categories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_default_categories_by_user
  # List default categories by user
  # Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [CategoriesResponseBody]
  describe 'list_default_categories_by_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_favorite_institutions
  # List favorite institutions
  # This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [InstitutionsResponseBody]
  describe 'list_favorite_institutions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_holdings
  # List holdings
  # This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_date Filter holdings from this date.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [String] :to_date Filter holdings to this date.
  # @return [HoldingsResponseBody]
  describe 'list_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_holdings_by_member
  # List holdings by member
  # This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_date Filter holdings from this date.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [String] :to_date Filter holdings to this date.
  # @return [HoldingsResponseBody]
  describe 'list_holdings_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_institution_credentials
  # List institution credentials
  # Use this endpoint to see which credentials will be needed to create a member for a specific institution.
  # @param institution_code The institution_code of the institution.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [CredentialsResponseBody]
  describe 'list_institution_credentials test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_institutions
  # List institutions
  # This endpoint returns a list of institutions based on the specified search term or parameter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name This will list only institutions in which the appended string appears.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [Boolean] :supports_account_identification Filter only institutions which support account identification.
  # @option opts [Boolean] :supports_account_statement Filter only institutions which support account statements.
  # @option opts [Boolean] :supports_account_verification Filter only institutions which support account verification.
  # @option opts [Boolean] :supports_transaction_history Filter only institutions which support extended transaction history.
  # @return [InstitutionsResponseBody]
  describe 'list_institutions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_managed_accounts
  # List managed accounts
  # Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [AccountsResponseBody]
  describe 'list_managed_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_managed_institutions
  # List managed institutions
  # This endpoint returns a list of institutions which can be used to create partner-managed members.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [InstitutionsResponseBody]
  describe 'list_managed_institutions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_managed_members
  # List managed members
  # This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [MembersResponseBody]
  describe 'list_managed_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_managed_transactions
  # List managed transactions
  # This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [TransactionsResponseBody]
  describe 'list_managed_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_member_challenges
  # List member challenges
  # Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [ChallengesResponseBody]
  describe 'list_member_challenges test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_member_credentials
  # List member credentials
  # This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [CredentialsResponseBody]
  describe 'list_member_credentials test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_members
  # List members
  # This endpoint returns an array which contains information on every member associated with a specific user.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [MembersResponseBody]
  describe 'list_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_merchants
  # List merchants
  # This endpoint returns a paginated list of all the merchants in the MX system.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [MerchantsResponseBody]
  describe 'list_merchants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_statements_by_member
  # List statements by member
  # Use this endpoint to get an array of available statements.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [StatementsResponseBody]
  describe 'list_statements_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_taggings
  # List taggings
  # Use this endpoint to retrieve a list of all the taggings associated with a specific user.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [TaggingsResponseBody]
  describe 'list_taggings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_tags
  # List tags
  # Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [TagsResponseBody]
  describe 'list_tags test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_transaction_rules
  # List transaction rules
  # Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [TransactionRulesResponseBody]
  describe 'list_transaction_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_transactions
  # List transactions
  # Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_date Filter transactions from this date.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [String] :to_date Filter transactions to this date.
  # @return [TransactionsResponseBody]
  describe 'list_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_transactions_by_account
  # List transactions by account
  # This endpoint returns a list of the last 90 days of transactions associated with the specified account.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_date Filter transactions from this date.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [String] :to_date Filter transactions to this date.
  # @return [TransactionsResponseBody]
  describe 'list_transactions_by_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_transactions_by_member
  # List transactions by member
  # Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_date Filter transactions from this date.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [String] :to_date Filter transactions to this date.
  # @return [TransactionsResponseBody]
  describe 'list_transactions_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_transactions_by_tag
  # List transactions by tag
  # Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
  # @param tag_guid The unique id for a &#x60;tag&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_date Filter transactions from this date.
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @option opts [String] :to_date Filter transactions to this date.
  # @return [TransactionsResponseBody]
  describe 'list_transactions_by_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_user_accounts
  # List accounts
  # This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [AccountsResponseBody]
  describe 'list_user_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_users
  # List users
  # Use this endpoint to list every user you&#39;ve created in the MX Platform API.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Specify current page.
  # @option opts [Integer] :records_per_page Specify records per page.
  # @return [UsersResponseBody]
  describe 'list_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_account
  # Read account
  # This endpoint returns the specified &#x60;account&#x60; resource.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [AccountResponseBody]
  describe 'read_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_category
  # Read a custom category
  # Use this endpoint to read the attributes of either a default category or a custom category.
  # @param category_guid The unique id for a &#x60;category&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [CategoryResponseBody]
  describe 'read_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_default_category
  # Read a default category
  # Use this endpoint to read the attributes of a default category.
  # @param category_guid The unique id for a &#x60;category&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [CategoryResponseBody]
  describe 'read_default_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_holding
  # Read holding
  # Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
  # @param holding_guid The unique id for a &#x60;holding&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [HoldingResponseBody]
  describe 'read_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_institution
  # Read institution
  # This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
  # @param institution_code The institution_code of the institution.
  # @param [Hash] opts the optional parameters
  # @return [InstitutionResponseBody]
  describe 'read_institution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_managed_account
  # Read managed account
  # Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [AccountResponseBody]
  describe 'read_managed_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_managed_member
  # Read managed member
  # This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'read_managed_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_managed_transaction
  # Read managed transaction
  # Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param transaction_guid The unique id for a &#x60;transaction&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponseBody]
  describe 'read_managed_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_member
  # Read member
  # Use this endpoint to read the attributes of a specific member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'read_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_member_status
  # Read member status
  # This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberStatusResponseBody]
  describe 'read_member_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_merchant
  # Read merchant
  # Returns information about a particular merchant, such as a logo, name, and website.
  # @param merchant_guid The unique id for a &#x60;merchant&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MerchantResponseBody]
  describe 'read_merchant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_merchant_location
  # Read merchant location
  # This endpoint returns the specified merchant_location resource.
  # @param merchant_location_guid The unique id for a &#x60;merchant_location&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MerchantLocationResponseBody]
  describe 'read_merchant_location test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_statement_by_member
  # Read statement by member
  # Use this endpoint to read a JSON representation of the statement.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param statement_guid The unique id for a &#x60;statement&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [StatementResponseBody]
  describe 'read_statement_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_tag
  # Read tag
  # Use this endpoint to read the attributes of a particular tag according to its unique GUID.
  # @param tag_guid The unique id for a &#x60;tag&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [TagResponseBody]
  describe 'read_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_tagging
  # Read tagging
  # Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
  # @param tagging_guid The unique id for a &#x60;tagging&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [TaggingResponseBody]
  describe 'read_tagging test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_transaction
  # Read transaction
  # Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
  # @param transaction_guid The unique id for a &#x60;transaction&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponseBody]
  describe 'read_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_transaction_rule
  # Read transaction rule
  # Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
  # @param transaction_rule_guid The unique id for a &#x60;transaction_rule&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [TransactionRuleResponseBody]
  describe 'read_transaction_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_user
  # Read user
  # Use this endpoint to read the attributes of a specific user.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [UserResponseBody]
  describe 'read_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_connect_widget_url
  # Request connect widget url
  # This endpoint will return a URL for an embeddable version of MX Connect.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [ConnectWidgetRequestBody] :connect_widget_request_body Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
  # @return [ConnectWidgetResponseBody]
  describe 'request_connect_widget_url test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_o_auth_window_uri
  # Request oauth window uri
  # This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
  # @option opts [String] :ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in.
  # @option opts [Boolean] :skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
  # @return [OAuthWindowResponseBody]
  describe 'request_o_auth_window_uri test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_widget_url
  # Request widget url
  # This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param widget_request_body The widget url configuration options.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language The desired language of the widget.
  # @return [WidgetResponseBody]
  describe 'request_widget_url test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for resume_aggregation
  # Resume aggregation
  # This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_resume_request_body Member object with MFA challenge answers
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'resume_aggregation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_by_member
  # Update account by member
  # This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param account_update_request_body Account object to be created with optional parameters (is_hidden)
  # @param [Hash] opts the optional parameters
  # @return [AccountResponseBody]
  describe 'update_account_by_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_category
  # Update category
  # Use this endpoint to update the attributes of a custom category according to its unique GUID.
  # @param category_guid The unique id for a &#x60;category&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param category_update_request_body Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
  # @param [Hash] opts the optional parameters
  # @return [CategoryResponseBody]
  describe 'update_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_managed_account
  # Update managed account
  # Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param account_guid The unique id for an &#x60;account&#x60;.
  # @param managed_account_update_request_body Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)
  # @param [Hash] opts the optional parameters
  # @return [AccountResponseBody]
  describe 'update_managed_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_managed_member
  # Update managed member
  # Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param managed_member_update_request_body Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'update_managed_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_managed_transaction
  # Update managed transaction
  # Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param transaction_guid The unique id for a &#x60;transaction&#x60;.
  # @param managed_transaction_update_request_body Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponseBody]
  describe 'update_managed_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_member
  # Update member
  # Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param member_update_request_body Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'update_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tag
  # Update tag
  # Use this endpoint to update the name of a specific tag according to its unique GUID.
  # @param tag_guid The unique id for a &#x60;tag&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param tag_update_request_body Tag object to be updated with required parameter (tag_guid)
  # @param [Hash] opts the optional parameters
  # @return [TagResponseBody]
  describe 'update_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tagging
  # Update tagging
  # Use this endpoint to update a tagging.
  # @param tagging_guid The unique id for a &#x60;tagging&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param tagging_update_request_body Tagging object to be updated with required parameter (tag_guid)
  # @param [Hash] opts the optional parameters
  # @return [TaggingResponseBody]
  describe 'update_tagging test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_transaction
  # Update transaction
  # Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
  # @param transaction_guid The unique id for a &#x60;transaction&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param transaction_update_request_body Transaction object to be updated with a new description
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponseBody]
  describe 'update_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_transaction_rule
  # Update transaction_rule
  # Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
  # @param transaction_rule_guid The unique id for a &#x60;transaction_rule&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param transaction_rule_update_request_body TransactionRule object to be updated
  # @param [Hash] opts the optional parameters
  # @return [TransactionRuleResponseBody]
  describe 'update_transaction_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update user
  # Use this endpoint to update the attributes of a specific user. The MX Platform API will respond with the updated user object. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill. To disable a user, update it and set the is_disabled parameter to true. Set it to false to re-enable the user.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param user_update_request_body User object to be updated (None of these parameters are required, but the user object cannot be empty.)
  # @param [Hash] opts the optional parameters
  # @return [UserResponseBody]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for verify_member
  # Verify member
  # The verify endpoint begins a verification process for a member.
  # @param member_guid The unique id for a &#x60;member&#x60;.
  # @param user_guid The unique id for a &#x60;user&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MemberResponseBody]
  describe 'verify_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
